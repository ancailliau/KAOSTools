// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Beaver.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Views for goal models")]
    public partial class ViewsForGoalModelsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        #line 1 "views.feature"
        #line hidden
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Views for goal models", "As a modeler\nI want to have views on my goal model\nSo that I can deal with complexity", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line 7
    testRunner.Given("a model");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a view")]
        public virtual void AddAView()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a view", ((string[])(null)));
#line 9
  this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 10
    testRunner.When("I add a new view 'view-1'");
#line 11
    testRunner.Then("the model contains a view named 'view-1'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove a view")]
        public virtual void RemoveAView()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove a view", ((string[])(null)));
#line 13
  this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 14
    testRunner.Given("a view 'view-1'");
#line 15
    testRunner.When("I remove the view 'view-1'");
#line 16
    testRunner.Then("the model does not contains a view named 'view-1'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add element to a view")]
        public virtual void AddElementToAView()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add element to a view", ((string[])(null)));
#line 18
  this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 19
    testRunner.Given("a view 'view-1'");
#line 20
    testRunner.And("a goal 'goal-1'");
#line 21
    testRunner.When("I add 'goal-1' to 'view-1'");
#line 22
    testRunner.Then("the view 'view-1' contains 'goal-1'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove element from a view")]
        public virtual void RemoveElementFromAView()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove element from a view", ((string[])(null)));
#line 24
  this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 25
    testRunner.Given("a view 'view-1'");
#line 26
    testRunner.And("a goal 'goal-1'");
#line 27
    testRunner.And("the view 'view-1' contains goal 'goal-1'");
#line 28
    testRunner.When("I remove 'goal-1' from 'view-1'");
#line 29
    testRunner.Then("the view 'view-1' does not contains 'goal-1'");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
