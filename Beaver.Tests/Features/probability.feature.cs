// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Beaver.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Probability")]
    public partial class ProbabilityFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        #line 1 "probability.feature"
        #line hidden
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Probability", "As a modeler,\nI want to have accurate simulation\nSo that I can base my conclusion on right assumptions", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line 7
    testRunner.Given("a model");
#line 8
    testRunner.And("a goal 'goal-1'");
#line 9
    testRunner.And("a goal 'goal-2'");
#line 10
    testRunner.And("a goal 'goal-3'");
#line 11
    testRunner.And("an obstacle 'obstacle-1' with a probability of 3%");
#line 12
    testRunner.And("'obstacle-1' obstructs 'goal-3'");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Milestone refinement")]
        [NUnit.Framework.TestCaseAttribute("milestone-driven", "97%", new string[0])]
        [NUnit.Framework.TestCaseAttribute("equitable case-driven", "98.5%", new string[0])]
        public virtual void MilestoneRefinement(string pattern, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Milestone refinement", exampleTags);
#line 14
  this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 15
    testRunner.And(string.Format("a {0} refinement 'refinement-1' for 'goal-1'", pattern));
#line 16
    testRunner.And("'refinement-1' contains 'goal-2'");
#line 17
    testRunner.And("'refinement-1' contains 'goal-3'");
#line 18
    testRunner.When("I run a simulation");
#line 19
    testRunner.Then(string.Format("'goal-1' has a probability of {0}", result));
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
