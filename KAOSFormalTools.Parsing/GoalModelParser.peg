start = Start
value = KAOSFormalTools.Parsing.Element
debug = 


Start              := S Elements S;
Elements           := ('begin' S ( Goal / DomProp / Obstacle 
                                   / Agent) 'end' S)*                     `value = BuildElements (results);`
                                                                         
Goal               := 'goal'           S (GoalAttribute S)*               `value = BuildGoal(results);`
DomProp            := 'domainproperty' S (DomPropAttribute S)*            `value = BuildDomainProperty(results);`
Obstacle           := 'obstacle'       S (ObstacleAttribute S)*           `value = BuildObstacle(results);`
Agent              := 'agent'          S (AgentAttribute S)*              `value = BuildAgent(results);`
                                                                         
GoalAttribute      := ( Id / Name / FormalSpec / RefinedBy            
                        / ObstructedBy / AssignedTo )                     `value = results[0].Value;`
DomPropAttribute   := ( Id / Name / FormalSpec )                          `value = results[0].Value;`
ObstacleAttribute  := ( Id / Name / FormalSpec / RefinedBy )              `value = results[0].Value;`
AgentAttribute     := ( Id / Name )                                       `value = results[0].Value;`
                                                                         
Id                 := 'id'         S Identifier                           `value = BuildId(results);`
Name               := 'name'       S '"' String '"'                       `value = BuildName(results);`
FormalSpec         := 'formalspec' S '"' String '"'                       `value = BuildFormalSpec(results);`
                                                                         
RefinedBy          := 'refinedby'    S IdOrName (S ',' S IdOrName)*       `value = BuildRefinedBy(results);`
ObstructedBy       := 'obstructedby' S IdOrName (S ',' S IdOrName)*       `value = BuildObstructedBy(results);`
AssignedTo         := 'assignedto'   S IdOrName (S ',' S IdOrName)*       `value = BuildAssignedTo(results);`
                                                                         
# Expressions                                
                         
IdOrName           := ( '"' String '"' / Identifier )                    `value = BuildIdOrName(results);` `expected = "id or name"`
Identifier         := [a-zA-Z$_-] [a-zA-Z0-9$_-]*                        `value = null` `expected = "identifier"`
String             := [^"]+                                              `value = null` `expected = "string"`

# Scaffolding

S                  := (Space* Comment+ Space*)+ / Space*                                   `text = null`
Space              := [ \t\r\n]                                           `;` `expected = "whitespace"`
Comment            := '#' [^\r\n]+                                         `text = null`
