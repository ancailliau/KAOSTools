@model ModelWebBrowser.Models.KAOSModelPage
@using ModelWebBrowser.Helpers
@using KAOSTools.MetaModel
@using System.Linq

<div class="row">

  @Html.Partial("Menu")

  <div class="span9">
  
    <!-- Agents -->
    
    <div class="section-header" id="agents">
        <h2>Agents</h2>
    </div>
    
    <h3>Agents summary</h3>
    
    <table class="table table-striped table-bordered">
      <tr><th>Name</th><th>Definition</th></tr>
      @foreach (var g in Model.Model.GoalModel.Agents) {
        @Summary(g);
      }
    </table>
    
    <h3>Agents details</h3>
    
    @foreach (var g in Model.Model.GoalModel.Agents) {
      <h4 id="@g.Identifier">
        @g.FriendlyName
        
        @if (g.Implicit) {
          <span class="label label-info">Implicit</span>
        }
        
        @if (g.Type == KAOSTools.MetaModel.AgentType.Software) {
          <span class="label label-important">Software</span>
        } else if (g.Type == KAOSTools.MetaModel.AgentType.Environment) {
          <span class="label label-success">Environment</span>
        } else if (g.Type == KAOSTools.MetaModel.AgentType.Malicious) {
          <span class="label label-warning">Malicious</span>
        }
        
      </h4>
      
      <table class="table table-striped table-bordered">
        @Identifier(g)
        @Name(g)
        @Definition(g)
        @AgentType(g)
      </table>
      
      <dl>
        @AssignedGoals(g)
        @SourceReference(g)
      </dl>
      
      @TextExport(g)
      
      <hr class="spacer" />  
    }  

    <!-- / Agents -->
              
</div></div>

@helper Summary (dynamic item) {
  <tr>
    <td><a href="#@item.Identifier">@item.FriendlyName</a></td>
    <td>
      @if (string.IsNullOrEmpty(item.Definition)) {
        <p class="muted">Not specified</p>
      } else {
        @MarkdownHelper.CompileMarkdown(item.Definition)
      }
    </td>
  </tr>
}

@helper Title (dynamic item) {
  <h4 id="@item.Identifier">
    @item.FriendlyName
    @if (item.Implicit) {
      <span class="label label-info">Implicit</span>
    }
  </h4>
}

@helper Identifier (dynamic item) {
  <tr>
    <th>Identifier</th>
    <td>
      <p><code>@item.Identifier</code></p>
    </td>
  </tr>
}

@helper Name (dynamic item) {
  <tr>
    <th>Name</th>
    <td>
      <p>@item.Name</p>
    </td>
  </tr>
}

@helper Definition (dynamic item) {
  <tr>
    <th>Definition</th>
    <td>
      @if (string.IsNullOrWhiteSpace(item.Definition)) {
        <p class="muted">Not specified</p>
      } else {
        @MarkdownHelper.CompileMarkdown(item.Definition)
      }
    </td>
  </tr>
}

@helper FormalSpec (dynamic item) {
  if (item.FormalSpec != null) {
    <tr>
      <th>Formal&nbsp;specification</th>
      <td>
        <div class="formalspec">@FormalSpecHelper.ToHtmlString(item.FormalSpec)</div>
      </td>
    </tr>
  }
}

@helper SourceReference (dynamic item) {
    if (Model.Declarations.ContainsKey(item)) { 
        <dt>Model code reference</dt>
        <dd>
          <ul>
          @foreach (var declaration in Model.Declarations[item]) {
            <li>
              @if (declaration.Type == KAOSTools.Parsing.DeclarationType.Declaration) {
                @:Declared at
              } else if (declaration.Type == KAOSTools.Parsing.DeclarationType.Override) {
                @:Overriden at
              } else if (declaration.Type == KAOSTools.Parsing.DeclarationType.Reference) {
                @:Referenced at
              }
              <code>@declaration.Filename</code>, line @declaration.Line and column @declaration.Col
            </li>
          }
          </ul>
        </dd>
    }
}

@helper Arguments (dynamic item) {
  if (item.Arguments.Count > 0) {
  <tr>
    <th>@(item.Arguments.Count > 1 ? "Arguments" : "Argument")</th>
    <td>
      <ul>
      @foreach (var argument in item.Arguments) {
        <li>
          <code>@argument.Name</code> : 
          <a href="#@argument.Type.Identifier">@argument.Type.FriendlyName</a>
        </li>
      }
      </ul>
    </td>
  </tr>
  }
}

@helper Declarations (dynamic item) {
  if (Model.Declarations.ContainsKey(item)) {
    <h4>@(Model.Declarations[item].Count > 1 ? "Declarations" : "Declaration")</h4>
    <table class="table table-striped">
      <tr><th>Filename</th><th>Line</th><th>Column</th></tr>
      @foreach (var declaration in Model.Declarations[item]) {
        <tr>
          <td>@declaration.Filename</td>
          <td>@declaration.Line</td>
          <td>@declaration.Col</td>
        </tr>
      }
    </table>
  }
}

@helper Refinements (dynamic g) {
  if (g.Refinements.Count > 0) {
      <dt>Refined&nbsp;by</dt>
      <dd>
      @foreach (var r in g.Refinements) {
        if (r.SystemReference != null | g.Refinements.Count > 1) {
          <p><strong>Alternative refinement</strong> @(r.SystemReference != null ? "(" + r.SystemReference.FriendlyName + ")" : "")</p>
        }
        <ul>
          @foreach (var g2 in r.Subgoals) {
            <li><a href="#@g2.Identifier">@g2.FriendlyName</a></li>
          }
          @foreach (var g2 in r.DomainProperties) {
            <li><a href="#@g2.Identifier">@g2.FriendlyName</a></li>
          }
          @foreach (var g2 in r.DomainHypotheses) {
            <li><a href="#@g2.Identifier">@g2.FriendlyName</a></li>
          }
        </ul>
      }
      </dd>
  }
}

@helper AntigoalRefinements (dynamic g) {
  if (g.Refinements.Count > 0) {
      <dt>Refined&nbsp;by</dt>
      <dd>
      @foreach (var r in g.Refinements) {
        if (r.SystemReference != null | g.Refinements.Count > 1) {
          <p><strong>Alternative refinement</strong> @(r.SystemReference != null ? "(" + r.SystemReference.FriendlyName + ")" : "")</p>
        }
        <ul>
          @foreach (var g2 in r.SubAntiGoals) {
            <li><a href="#@g2.Identifier">@g2.FriendlyName</a></li>
          }
          @foreach (var g2 in r.Obstacles) {
            <li><a href="#@g2.Identifier">@g2.FriendlyName</a></li>
          }
          @foreach (var g2 in r.DomainProperties) {
            <li><a href="#@g2.Identifier">@g2.FriendlyName</a></li>
          }
          @foreach (var g2 in r.DomainHypotheses) {
            <li><a href="#@g2.Identifier">@g2.FriendlyName</a></li>
          }
        </ul>
      }
      </dd>
  }
}


@helper ObstacleRefinements (dynamic g) {
  if (g.Refinements.Count > 0) {
    <dt>@(g.Refinements.Count > 1 ? "Refinements" : "Refinement")</dt>
    <dd>
    @foreach (var r in g.Refinements) {
      <p><strong>Alternative refinement</strong></p>
      <ul>
        @foreach (var g2 in r.Subobstacles) {
          <li><a href="#@g2.Identifier">@g2.FriendlyName</a></li>
        }
        @foreach (var g2 in r.DomainProperties) {
          <li><a href="#@g2.Identifier">@g2.FriendlyName</a></li>
        }
        @foreach (var g2 in r.DomainHypotheses) {
          <li><a href="#@g2.Identifier">@g2.FriendlyName</a></li>
        }
      </ul>
    }
    </dd>
  }
}

@helper AgentAssignments (dynamic g) {
  if (g.AgentAssignments.Count > 0) {
      <dt>Assigned&nbsp;to</dt>
      <dd>
        @foreach (var r in g.AgentAssignments) {
          if (g.AgentAssignments.Count > 1) {
            <p>
              <strong>Alternative assignment</strong> 
              @(r.SystemReference != null ? "(" + r.SystemReference.FriendlyName + ")" : "")
     
              @{
                var isRequirement = ((IEnumerable<Agent>) r.Agents).All (y => y.Type == KAOSTools.MetaModel.AgentType.Software);
                var isExpectation = ((IEnumerable<Agent>) r.Agents).All (y => y.Type == KAOSTools.MetaModel.AgentType.Environment | y.Type == KAOSTools.MetaModel.AgentType.None);
              }
              
              @if (isRequirement) {
                <span class="label label-important">Requirement</span>
              }
              
              @if (isExpectation) {
                <span class="label label-success">Expectation</span>
              }
            </p>
          }
          <ul>
            @foreach (var a in r.Agents) {
              <li><a href="#@a.Identifier">@a.FriendlyName</a></li>
            }
          </ul>
        }
      </dd>
  }
}

@helper Obstructions (dynamic g) {
  if (g.Obstructions.Count > 0) {
    <dt>Obstructed&nbsp;by</dt>
    <dd><ul>
      @foreach (var o in g.Obstructions) {
        <li><a href="#@o.Identifier">@o.FriendlyName</a></li>
      }
    </ul></dd>
  }
}

@helper ParentGoals (dynamic g) {
  var parents = Model.Model.GoalModel.Goals.Where (x => x.Refinements.Count(y => y.Subgoals.Contains(g)) > 0);
  if (parents.Count() > 0) {
    <dt>Parents</dt>
    <dd><ul>
      @foreach (var o in parents) {
        <li><a href="#@o.Identifier">@o.FriendlyName</a></li>
      }
    </ul></dd>
  }
}

@helper Resolving (dynamic g) {
  var obstacles = Model.Model.GoalModel.Obstacles.Where (x => x.Resolutions.Count(y => y.ResolvingGoal == g) > 0);
  if (obstacles.Count() > 0) {
    <dt>Resolving</dt>
    <dd><ul>
      @foreach (var o in obstacles) {
        <li><a href="#@o.Identifier">@o.FriendlyName</a></li>
      }
    </ul></dd>
  }
}

@helper ObstructedGoals (dynamic g) {
  var goals = Model.Model.GoalModel.Goals.Where (x => x.Obstructions.Contains(g));
  if (goals.Count() > 0) {
    <dt>Obstructed goals</dt>
    <dd><ul>
      @foreach (var o in goals) {
        <li><a href="#@o.Identifier">@o.FriendlyName</a></li>
      }
    </ul></dd>
  }
}

@helper Resolutions (dynamic g) {
  if (g.Resolutions.Count > 0) {
    <dt>@(g.Resolutions.Count > 1 ? "Resolutions" : "Resolution")</dt>
    <dd><ul>
      @foreach (var o in g.Resolutions) {
        <li><a href="#@o.ResolvingGoal.Identifier">@o.ResolvingGoal.FriendlyName</a></li>
      }
    </ul></dd>
  }
}

@helper Assumptions (dynamic g) {
  if (g.Assumptions.Count > 0) {
    <dt>Assumptions</dt>
    <dd><ul>
      @foreach (var o in g.Assumptions) {
        <li>
          @if (o.Implicit) {
            <span class="label label-warning">Implicit</span>
          }
                    
          @if (o is KAOSTools.MetaModel.GoalAssumption) {
              var ass = o as KAOSTools.MetaModel.GoalAssumption;
              <a href="#@ass.Assumed.Identifier">@ass.Assumed.FriendlyName</a>
          } else if (o is KAOSTools.MetaModel.DomainHypothesisAssumption) {
              var ass = o as KAOSTools.MetaModel.DomainHypothesisAssumption;
              <a href="#@ass.Assumed.Identifier">@ass.Assumed.FriendlyName</a>
          } else if (o is KAOSTools.MetaModel.ObstacleNegativeAssumption) {
              var ass = o as KAOSTools.MetaModel.ObstacleNegativeAssumption;
              <strong>not</strong> <a href="#@ass.Assumed.Identifier">@ass.Assumed.FriendlyName</a>
          }
        </li>
      }
    </ul>
    </dd>
  }
}

@helper Exceptions (dynamic g) {
  if (g.Exceptions.Count > 0) {
    <dt>Exceptions</dt>
    <dd><ul>
      @foreach (var o in g.Exceptions) {
        <li>
          @if (o.Implicit) {
            <span class="label label-warning">Implicit</span>
          }
          <a href="#@o.ResolvedObstacle.Identifier">@o.ResolvedObstacle.FriendlyName</a>
          <br />
          then <a href="#@o.ResolvingGoal.Identifier">@o.ResolvingGoal.FriendlyName</a>
        </li>
      }
    </ul></dd>
  }
}

@helper Attributes (dynamic item) {
  if (item.Attributes.Count > 0) {
    <dt>Attributes</dt>
    <dd>
      <table class="table table-striped table-bordered">
        <tr><th>Name</th><th>Type</th><th>Definition</th></tr>
        @foreach (var argument in item.Attributes) {
          <tr>
            <td><a href="#@argument.Identifier">@argument.FriendlyName</a></td>
            <td><a href="#@argument.Type.Identifier">@argument.Type.FriendlyName</a></td>
            <td>@if (string.IsNullOrEmpty(argument.Definition)) {
              <p class="muted">Not specified</p>
            } else {
              @argument.Definition
             }</td>
          </tr>
        }
      </table>
    </dd>
  }
}


@helper AgentType (Agent argument) {
  <tr>
    <th>Type</th>
    <td>
      @if (argument.Type == KAOSTools.MetaModel.AgentType.Software) {
        @:Software
      } else if (argument.Type == KAOSTools.MetaModel.AgentType.Environment) {
        @:Environment
      } else if (argument.Type == KAOSTools.MetaModel.AgentType.Malicious) {
        @:Malicious
      } else {
        <span class="muted">Not specified</span>
      }
    </td>
  </tr>
}

@helper Type (dynamic argument) {
  <tr>
    <th>Type</th>
    <td>
      @if (argument.Type != null) {
        <a href="#@argument.Type.Identifier">@argument.Type.FriendlyName</a>
      } else {
        <p class="muted">Not specified</p>
      }
    </td>
  </tr>
}

@helper Derived (dynamic argument) {
  <tr>
    <th>Derived?</th>
    <td>
      @(argument.Derived ? "Yes" : "No")
    </td>
  </tr>
}

@helper Links (dynamic g) {
  if (g is Relation) {
    if (g.Links.Count > 0) {
      <dt>@(g.Links.Count > 1 ? "Links" : "Link")</dt>
      <dd><ul>
        @foreach (var o in g.Links) {
          <li>
            @(string.IsNullOrEmpty(o.Multiplicity) ? "" : string.Format("({0})", o.Multiplicity)) 
            <a href="#@o.Target.Identifier">@o.Target.FriendlyName</a>
          </li>
        }
      </ul></dd>
    }
  }
}

@helper Parents (dynamic g) {
  if (g.Parents.Count > 0) {
    <dt>@(g.Parents.Count > 1 ? "Parents" : "Parent")</dt>
    <dd><ul>
      @foreach (var o in g.Parents) {
        <li><a href="#@o.Identifier">@o.FriendlyName</a></li>
      }
    </ul></dd>
  }
}

@helper AssignedGoals (Agent g) {
  var goals = Model.Model.GoalModel.Goals.Where (x => x.AgentAssignments.Count(y => y.Agents.Contains (g)) > 0);
  if (goals.Count() > 0) {
    <dt>Assigned goals</dt>
    <dd><ul>
      @foreach (var o in goals) {
        <li><a href="#@o.Identifier">@o.FriendlyName</a></li>
      }
    </ul></dd>
  }
}

@helper TextExport (Goal g) {
  <div class="example">
    <p><strong>Goal</strong> @g.Name</p>
  
    @if (!string.IsNullOrEmpty (g.Definition)) {
        <p><strong>Def</strong> @g.Definition</p>
    }
  
    @if (g.FormalSpec != null) {
        <p><strong>FormalSpec</strong> @g.FormalSpec.ToHtmlString(false)</p>
    }
  
    @foreach (var o in g.AgentAssignments) {
        <p><strong>AssignedTo</strong> @(string.Join(",", o.Agents.Select(x => x.Name)))</p>
    }       
  
    @foreach (var o in g.Obstructions) {
        <p><strong>Obstructedby</strong> @o.Name</p>
    }       
  
    @foreach (var o in g.Assumptions) {
        if (o is KAOSTools.MetaModel.GoalAssumption) {
            var ass = o as KAOSTools.MetaModel.GoalAssumption;
            <p><strong>Assumption</strong> @ass.Assumed.FriendlyName</p>
        } else if (o is KAOSTools.MetaModel.DomainHypothesisAssumption) {
            var ass = o as KAOSTools.MetaModel.DomainHypothesisAssumption;
            <p><strong>Assumption</strong> @ass.Assumed.FriendlyName</p>
        } else if (o is KAOSTools.MetaModel.ObstacleNegativeAssumption) {
            var ass = o as KAOSTools.MetaModel.ObstacleNegativeAssumption;
            <p><strong>Assumption</strong> <strong>not</strong> @ass.Assumed.FriendlyName</p>
        }
    }
  
    @foreach (var o in g.Exceptions) {
        <p><strong>Exception</strong> @o.ResolvedObstacle.Name <strong>then</strong> @o.ResolvingGoal.Name</p>
    }
  </div>
}

@helper TextExport (AntiGoal g) {
  <div class="example">
    <p><strong>AntiGoal</strong> @g.Name</p>
  
    @if (!string.IsNullOrEmpty (g.Definition)) {
        <p><strong>Def</strong> @g.Definition</p>
    }
  
    @if (g.FormalSpec != null) {
        <p><strong>FormalSpec</strong> @g.FormalSpec.ToHtmlString(false)</p>
    }
  
    @foreach (var o in g.AgentAssignments) {
        <p><strong>AssignedTo</strong> @(string.Join(",", o.Agents.Select(x => x.Name)))</p>
    }
  </div>
}

@helper TextExport (Obstacle g) {
  <div class="example">
    <p><strong>Obstacle</strong> @g.Name</p>
  
    @if (!string.IsNullOrEmpty (g.Definition)) {
        <p><strong>Def</strong> @g.Definition</p>
    }
  
    @if (g.FormalSpec != null) {
        <p><strong>FormalSpec</strong> @g.FormalSpec.ToHtmlString(false)</p>
    }
    
    @foreach (var o in g.Resolutions) {
        <p><strong>ResolvedBy</strong> @o.ResolvingGoal.Name</p>
    }
    
    @foreach (var o in g.AgentAssignments) {
        <p><strong>AssignedTo</strong> @(string.Join(",", o.Agents.Select(x => x.Name)))</p>
    }
  </div>
}


@helper TextExport (DomainProperty g) {
  <div class="example">
    <p><strong>DomProp</strong> @g.Name</p>
  
    @if (!string.IsNullOrEmpty (g.Definition)) {
        <p><strong>Def</strong> @g.Definition</p>
    }
  
    @if (g.FormalSpec != null) {
        <p><strong>FormalSpec</strong> @g.FormalSpec.ToHtmlString(false)</p>
    }
  </div>
}


@helper TextExport (DomainHypothesis g) {
  <div class="example">
    <p><strong>DomHyp</strong> @g.Name</p>
  
    @if (!string.IsNullOrEmpty (g.Definition)) {
        <p><strong>Def</strong> @g.Definition</p>
    }
  
    @if (g.FormalSpec != null) {
        <p><strong>FormalSpec</strong> @g.FormalSpec.ToHtmlString(false)</p>
    }
  </div>
}


@helper TextExport (Agent g) {
  <div class="example">
    <p><strong>Agent</strong> @g.Name</p>
  
    @if (!string.IsNullOrEmpty (g.Definition)) {
        <p><strong>Def</strong> @g.Definition</p>
    }
  </div>
}

@helper TextExport (Predicate g) {
  <div class="example">
    <p><strong>Predicate</strong> @g.Name</p>
  
    @if (!string.IsNullOrEmpty (g.Definition)) {
        <p><strong>Def</strong> @g.Definition</p>
    }
    
    @foreach (var arg in g.Arguments) {
        <p><strong>Argument</strong> @arg.Name : @arg.Type.FriendlyName</p>
    }
  
    @if (g.FormalSpec != null) {
        <p><strong>FormalSpec</strong> @g.FormalSpec.ToHtmlString(false)</p>
    }
  </div>
}


@helper TextExport (Entity g) {
  <div class="example">
    <p><strong>Entity</strong> @g.Name</p>
  
    @if (!string.IsNullOrEmpty (g.Definition)) {
        <p><strong>Def</strong> @g.Definition</p>
    }
   
    @foreach (var arg in g.Parents) {
        <p><strong>IsA</strong> @arg.Name</p>
    }
        
    @foreach (var arg in g.Attributes) {
        <p><strong>Attribute</strong> @arg.Name : @arg.Type.FriendlyName</p>
    }
  </div>
}

@helper TextExport (Relation g) {
  <div class="example">
    <p><strong>Association</strong> @g.Name</p>
  
    @if (!string.IsNullOrEmpty (g.Definition)) {
        <p><strong>Def</strong> @g.Definition</p>
    }
   
    @foreach (var arg in g.Parents) {
        <p><strong>IsA</strong> @arg.Name</p>
    }
  
    @foreach (var arg in g.Links) {
        <p><strong>Link</strong> (@arg.Multiplicity) @arg.Target.Name</p>
    }
        
    @foreach (var arg in g.Attributes) {
        <p><strong>Attribute</strong> @arg.Name : @arg.Type.FriendlyName</p>
    }
  </div>
}


@helper TextExport (GivenType g) {
  <div class="example">
    <p><strong>GivenType</strong> @g.Name</p>
  
    @if (!string.IsNullOrEmpty (g.Definition)) {
        <p><strong>Def</strong> @g.Definition</p>
    }
  </div>
}