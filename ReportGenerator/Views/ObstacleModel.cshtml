@model ReportGenerator.ViewModel
@using KAOSTools.Core
@using ReportGenerator.Helpers
@using System.IO

@{
    Layout = "Layout.cshtml";
    ViewBag.Title = Model.Model.Title;
    ViewBag.Author = Model.Model.Author;
    ViewBag.Version = Model.Model.Version;
}

<div class="section-header">
<h1>Obstacles</h1>
</div>

<div class="subsection-header">
    <h2>Obstacle summary</h2>
</div>

  <ul>
  @foreach (var g in Model.Model.Obstacles().OrderBy (g => g.FriendlyName)) {
    <li><a href="#obstacle-@g.Identifier">@g.FriendlyName</a></li>
  }
  </ul>


<div class="subsection-header">
    <h2>Obstacle details</h2>
</div>
@{
  int dgraphID = 0;
}
    @foreach (var g in Model.Model.Obstacles()) {
      var isRoot = Model.Model.Obstacles().Count (x => x.Refinements().Count (y => Enumerable.Contains(y.SubobstacleIdentifiers, g.Identifier)) > 0) == 0;
      
      <h4 id="obstacle-@g.Identifier">
     
        @g.FriendlyName
        
        <span style="float: right">
        @if (g.Implicit) {
          <span class="label label-warning">Implicit</span>
        }
        
        @if (isRoot) {     
          <span class="label label-primary">Root obstacle</span>
        }
        </span>
      </h4>
      
      <table class="table table-striped table-bordered">
        @Identifier(g)
        @Name(g)
        @Definition(g)
        @FormalSpec(g)
      </table>
      
      <dl>
        @ParentObstacles(g)
        @ObstacleRefinements(g)
        @CountermeasureGoals(g)
        @Source(g)
      </dl>
      
      <div class="diagram" id="diagram-@g.Identifier">
        <div></div>
        <pre class="hidden"></pre>
        <p class="caption">Partial goal model for <em>@g.FriendlyName</em>. (<a href="#" class="code">Show JSON</a>)</p>
      </div>
      
      <script type="text/javascript">
      
        $(document).ready (function() {
            $("#diagram-@g.Identifier pre").text(JSON.stringify(@JSONHelper.GetPartialObstacleDiagram(g), undefined, 2));
            $("#diagram-@g.Identifier p.caption a.code").click (function () {
                $("#diagram-@g.Identifier pre").toggleClass ('hidden');
                if ($("#diagram-@g.Identifier p.caption a.code").text() == "Show JSON") {
                    $("#diagram-@g.Identifier p.caption a.code").text("Hide JSON");
                } else {
                    $("#diagram-@g.Identifier p.caption a.code").text("Show JSON");
                }
                return false;
            });
            RenderGoalDiagram (@JSONHelper.GetPartialObstacleDiagram(g), "#diagram-@g.Identifier div");
        });
        
        
      </script>
      
      <hr class="spacer" />
      
    }
    
@helper Identifier (dynamic item) {
  <tr>
    <th>Identifier</th>
    <td>
      <p><code>@item.Identifier</code></p>
    </td>
  </tr>
}

@helper Name (dynamic item) {
  <tr>
    <th>Name</th>
    <td>
      <p>@item.Name</p>
    </td>
  </tr>
}

@helper Definition (dynamic item) {
  <tr>
    <th>Definition</th>
    <td>
      @if (string.IsNullOrWhiteSpace(item.Definition)) {
        <span class="text-muted">Not provided</span>
      } else {
        @MarkdownHelper.CompileMarkdown(item.Definition)
      }
    </td>
  </tr>
}

@helper FormalSpec (dynamic item) {
  if (item.FormalSpec != null) {
    <tr>
      <th>Formal&nbsp;specification</th>
      <td>
        <div class="formalspec"></div>
      </td>
    </tr>
  }
}

@helper ObstacleRefinements (Obstacle g) {
  if (g.Refinements().Count() > 0) {
      <dt>Refined&nbsp;by</dt>
      <dd>
      @foreach (var r in g.Refinements()) {
        <ul>
          @foreach (var g2 in r.SubObstacles ()) {
            <li><a href="#obstacle-@g2.Identifier">@g2.FriendlyName</a></li>
          }
          @foreach (var g2 in r.DomainProperties ()) {
            <li><a href="#domprop-@g2.Identifier">@g2.FriendlyName</a></li>
          }
          @foreach (var g2 in r.DomainHypotheses ()) {
            <li><a href="#domhyp-@g2.Identifier">@g2.FriendlyName</a></li>
          }
        </ul>
      }
      </dd>
  }
}

@helper ParentObstacles (dynamic g) {
  var parents = Model.Model.Obstacles().Where (x => x.Refinements().Count(y => Enumerable.Contains(y.SubobstacleIdentifiers, g.Identifier)) > 0);
  if (parents.Count() > 0) {
    <dt>@if (parents.Count() > 1) {
      @:Parent obstacles
    } else {
      @:Parent obstacle
    }</dt>
    <dd><ul>
      @foreach (var o in parents) {
        <li><a href="#obstacle-@o.Identifier">@o.FriendlyName</a></li>
      }
    </ul></dd>
  }
}

@helper CountermeasureGoals (Obstacle g) {
  if (g.Resolutions ().Count() > 0) {
    <dt>Resolving</dt>
    <dd><ul>
      @foreach (var o in g.Resolutions()) {
        <li><a href="#goal-@o.ResolvingGoalIdentifier">@o.ResolvingGoal().FriendlyName</a></li>
      }
    </ul></dd>
  }
}

@helper Source (KAOSCoreElement g) {
  if (Model.Declarations.ContainsKey(g)) {
    <dt>Defined in</dt>
    <dd><ul>
      @foreach (var o in Model.Declarations[g]) {
        <li><code>@o.Filename</code> at line <code>@o.Line</code>, column <code>@o.Col</code></li>
      }
    </ul></dd>
  }
}