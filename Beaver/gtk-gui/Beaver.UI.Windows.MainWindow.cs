
// This file has been generated by the GUI designer. Do not modify.
namespace Beaver.UI.Windows
{
	public partial class MainWindow
	{
		private global::Gtk.UIManager UIManager;
		private global::Gtk.Action ApplicationAction;
		private global::Gtk.Action quitAction;
		private global::Gtk.Action ModelAction;
		private global::Gtk.Action saveAction;
		private global::Gtk.Action openAction;
		private global::Gtk.Action saveAsAction;
		private global::Gtk.Action openAction1;
		private global::Gtk.Action saveAction1;
		private global::Gtk.Action saveAsAction1;
		private global::Gtk.Action revertToSavedAction;
		private global::Gtk.Action ViewsAction;
		private global::Gtk.Action ExportCurrentViewAction;
		private global::Gtk.Action newAction;
		private global::Gtk.Action ExportCurrentViewAsPDFAction;
		private global::Gtk.Action ProbaAction;
		private global::Gtk.Action GetFalsifiedGoalsAction;
		private global::Gtk.Action CheckAction;
		private global::Gtk.Action addGoal;
		private global::Gtk.Action addAgent;
		private global::Gtk.Action addDomProp;
		private global::Gtk.Action addObstacle;
		private global::Gtk.Action newAction1;
		private global::Gtk.VBox mainVBox;
		private global::Gtk.MenuBar mainMenu;
		private global::Gtk.Toolbar toolbar1;
		private global::Gtk.HPaned hpaned1;
		private global::Gtk.Statusbar statusBar;
		
		protected virtual void Build ()
		{
			global::Stetic.Gui.Initialize (this);
			// Widget Beaver.UI.Windows.MainWindow
			this.UIManager = new global::Gtk.UIManager ();
			global::Gtk.ActionGroup w1 = new global::Gtk.ActionGroup ("Default");
			this.ApplicationAction = new global::Gtk.Action (
				"ApplicationAction",
				global::Mono.Unix.Catalog.GetString("Application"),
				null,
				null
			);
			this.ApplicationAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Application");
			w1.Add (this.ApplicationAction, null);
			this.quitAction = new global::Gtk.Action (
				"quitAction",
				global::Mono.Unix.Catalog.GetString("Quit"),
				null,
				"gtk-quit"
			);
			this.quitAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Quit");
			w1.Add (this.quitAction, null);
			this.ModelAction = new global::Gtk.Action (
				"ModelAction",
				global::Mono.Unix.Catalog.GetString("Model"),
				null,
				null
			);
			this.ModelAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Model");
			w1.Add (this.ModelAction, null);
			this.saveAction = new global::Gtk.Action (
				"saveAction",
				global::Mono.Unix.Catalog.GetString("_Save"),
				null,
				"gtk-save"
			);
			this.saveAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("_Save");
			w1.Add (this.saveAction, null);
			this.openAction = new global::Gtk.Action (
				"openAction",
				global::Mono.Unix.Catalog.GetString("_Open"),
				null,
				"gtk-open"
			);
			this.openAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("_Open");
			w1.Add (this.openAction, null);
			this.saveAsAction = new global::Gtk.Action (
				"saveAsAction",
				global::Mono.Unix.Catalog.GetString("Save _As"),
				null,
				"gtk-save-as"
			);
			this.saveAsAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Save _As");
			w1.Add (this.saveAsAction, null);
			this.openAction1 = new global::Gtk.Action (
				"openAction1",
				null,
				null,
				"gtk-open"
			);
			w1.Add (this.openAction1, null);
			this.saveAction1 = new global::Gtk.Action (
				"saveAction1",
				null,
				null,
				"gtk-save"
			);
			w1.Add (this.saveAction1, null);
			this.saveAsAction1 = new global::Gtk.Action (
				"saveAsAction1",
				null,
				null,
				"gtk-save-as"
			);
			w1.Add (this.saveAsAction1, null);
			this.revertToSavedAction = new global::Gtk.Action (
				"revertToSavedAction",
				null,
				null,
				"gtk-revert-to-saved"
			);
			w1.Add (this.revertToSavedAction, null);
			this.ViewsAction = new global::Gtk.Action (
				"ViewsAction",
				global::Mono.Unix.Catalog.GetString("Views"),
				null,
				null
			);
			this.ViewsAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Views");
			w1.Add (this.ViewsAction, null);
			this.ExportCurrentViewAction = new global::Gtk.Action (
				"ExportCurrentViewAction",
				global::Mono.Unix.Catalog.GetString("Export current view"),
				null,
				null
			);
			this.ExportCurrentViewAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Export current view");
			w1.Add (this.ExportCurrentViewAction, null);
			this.newAction = new global::Gtk.Action (
				"newAction",
				global::Mono.Unix.Catalog.GetString("Add new goal model"),
				null,
				"gtk-new"
			);
			this.newAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Add new goal model");
			w1.Add (this.newAction, null);
			this.ExportCurrentViewAsPDFAction = new global::Gtk.Action (
				"ExportCurrentViewAsPDFAction",
				global::Mono.Unix.Catalog.GetString("Export current view as PDF"),
				null,
				null
			);
			this.ExportCurrentViewAsPDFAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Export current view as PDF");
			w1.Add (this.ExportCurrentViewAsPDFAction, null);
			this.ProbaAction = new global::Gtk.Action (
				"ProbaAction",
				global::Mono.Unix.Catalog.GetString("Proba"),
				null,
				null
			);
			this.ProbaAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Proba");
			w1.Add (this.ProbaAction, null);
			this.GetFalsifiedGoalsAction = new global::Gtk.Action (
				"GetFalsifiedGoalsAction",
				global::Mono.Unix.Catalog.GetString("Get falsified goals"),
				null,
				null
			);
			this.GetFalsifiedGoalsAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Get falsified goals");
			w1.Add (this.GetFalsifiedGoalsAction, null);
			this.CheckAction = new global::Gtk.Action (
				"CheckAction",
				global::Mono.Unix.Catalog.GetString("Check"),
				null,
				null
			);
			this.CheckAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Check");
			w1.Add (this.CheckAction, null);
			this.addGoal = new global::Gtk.Action (
				"addGoal",
				global::Mono.Unix.Catalog.GetString("Add goal"),
				null,
				"gtk-add"
			);
			this.addGoal.ShortLabel = global::Mono.Unix.Catalog.GetString ("Add goal");
			w1.Add (this.addGoal, null);
			this.addAgent = new global::Gtk.Action (
				"addAgent",
				global::Mono.Unix.Catalog.GetString("Add agent"),
				null,
				"gtk-add"
			);
			this.addAgent.ShortLabel = global::Mono.Unix.Catalog.GetString ("Add agent");
			w1.Add (this.addAgent, null);
			this.addDomProp = new global::Gtk.Action (
				"addDomProp",
				global::Mono.Unix.Catalog.GetString("Add Domain Property"),
				null,
				"gtk-add"
			);
			this.addDomProp.ShortLabel = global::Mono.Unix.Catalog.GetString ("Add Domain Property");
			w1.Add (this.addDomProp, null);
			this.addObstacle = new global::Gtk.Action (
				"addObstacle",
				global::Mono.Unix.Catalog.GetString("Add Obstacle"),
				null,
				"gtk-add"
			);
			this.addObstacle.ShortLabel = global::Mono.Unix.Catalog.GetString ("Add Obstacle");
			w1.Add (this.addObstacle, null);
			this.newAction1 = new global::Gtk.Action (
				"newAction1",
				global::Mono.Unix.Catalog.GetString("Add new behavior model"),
				null,
				"gtk-new"
			);
			this.newAction1.ShortLabel = global::Mono.Unix.Catalog.GetString ("Add new behavior model");
			w1.Add (this.newAction1, null);
			this.UIManager.InsertActionGroup (w1, 0);
			this.AddAccelGroup (this.UIManager.AccelGroup);
			this.Name = "Beaver.UI.Windows.MainWindow";
			this.Title = global::Mono.Unix.Catalog.GetString ("A simple Kaos Editor");
			this.WindowPosition = ((global::Gtk.WindowPosition)(1));
			this.DefaultWidth = 800;
			this.DefaultHeight = 600;
			// Container child Beaver.UI.Windows.MainWindow.Gtk.Container+ContainerChild
			this.mainVBox = new global::Gtk.VBox ();
			this.mainVBox.Name = "mainVBox";
			// Container child mainVBox.Gtk.Box+BoxChild
			this.UIManager.AddUiFromString ("<ui><menubar name='mainMenu'><menu name='ApplicationAction' action='ApplicationAction'><menuitem name='quitAction' action='quitAction'/></menu><menu name='ModelAction' action='ModelAction'><menuitem name='openAction' action='openAction'/><separator/><menuitem name='saveAction' action='saveAction'/><menuitem name='saveAsAction' action='saveAsAction'/><separator/><menuitem name='CheckAction' action='CheckAction'/></menu><menu name='ViewsAction' action='ViewsAction'><menuitem name='ExportCurrentViewAction' action='ExportCurrentViewAction'/><menuitem name='ExportCurrentViewAsPDFAction' action='ExportCurrentViewAsPDFAction'/></menu></menubar></ui>");
			this.mainMenu = ((global::Gtk.MenuBar)(this.UIManager.GetWidget ("/mainMenu")));
			this.mainMenu.Name = "mainMenu";
			this.mainVBox.Add (this.mainMenu);
			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.mainVBox [this.mainMenu]));
			w2.Position = 0;
			w2.Expand = false;
			w2.Fill = false;
			// Container child mainVBox.Gtk.Box+BoxChild
			this.UIManager.AddUiFromString ("<ui><toolbar name='toolbar1'><toolitem name='newAction' action='newAction'/><toolitem name='newAction1' action='newAction1'/><separator/><toolitem name='saveAction1' action='saveAction1'/><separator/><toolitem name='addGoal' action='addGoal'/><toolitem name='addAgent' action='addAgent'/><toolitem name='addDomProp' action='addDomProp'/><toolitem name='addObstacle' action='addObstacle'/></toolbar></ui>");
			this.toolbar1 = ((global::Gtk.Toolbar)(this.UIManager.GetWidget ("/toolbar1")));
			this.toolbar1.Name = "toolbar1";
			this.toolbar1.ShowArrow = false;
			this.toolbar1.ToolbarStyle = ((global::Gtk.ToolbarStyle)(2));
			this.toolbar1.IconSize = ((global::Gtk.IconSize)(2));
			this.mainVBox.Add (this.toolbar1);
			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.mainVBox [this.toolbar1]));
			w3.Position = 1;
			w3.Expand = false;
			w3.Fill = false;
			// Container child mainVBox.Gtk.Box+BoxChild
			this.hpaned1 = new global::Gtk.HPaned ();
			this.hpaned1.CanFocus = true;
			this.hpaned1.Name = "hpaned1";
			this.hpaned1.Position = 250;
			this.hpaned1.BorderWidth = ((uint)(6));
			this.mainVBox.Add (this.hpaned1);
			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.mainVBox [this.hpaned1]));
			w4.Position = 2;
			// Container child mainVBox.Gtk.Box+BoxChild
			this.statusBar = new global::Gtk.Statusbar ();
			this.statusBar.Name = "statusBar";
			this.statusBar.Spacing = 6;
			this.mainVBox.Add (this.statusBar);
			global::Gtk.Box.BoxChild w5 = ((global::Gtk.Box.BoxChild)(this.mainVBox [this.statusBar]));
			w5.Position = 3;
			w5.Expand = false;
			w5.Fill = false;
			this.Add (this.mainVBox);
			if ((this.Child != null)) {
				this.Child.ShowAll ();
			}
			this.Show ();
			this.DeleteEvent += new global::Gtk.DeleteEventHandler (this.OnDeleteEvent);
			this.quitAction.Activated += new global::System.EventHandler (this.OnQuitActionActivated);
			this.saveAction.Activated += new global::System.EventHandler (this.OnSaveActionActivated);
			this.openAction.Activated += new global::System.EventHandler (this.OnOpenActionActivated);
			this.saveAsAction.Activated += new global::System.EventHandler (this.OnSaveAsActionActivated);
			this.openAction1.Activated += new global::System.EventHandler (this.OnOpenActionActivated);
			this.saveAction1.Activated += new global::System.EventHandler (this.OnSaveActionActivated);
			this.saveAsAction1.Activated += new global::System.EventHandler (this.OnSaveAsActionActivated);
			this.revertToSavedAction.Activated += new global::System.EventHandler (this.OnRevertToSavedActionActivated);
			this.ExportCurrentViewAction.Activated += new global::System.EventHandler (this.OnExportCurrentViewActionActivated);
			this.newAction.Activated += new global::System.EventHandler (this.OnNewActionActivated);
			this.ExportCurrentViewAsPDFAction.Activated += new global::System.EventHandler (this.OnExportCurrentViewAsPDFActionActivated);
			this.GetFalsifiedGoalsAction.Activated += new global::System.EventHandler (this.OnGetFalsifiedGoalsActionActivated);
			this.CheckAction.Activated += new global::System.EventHandler (this.OnCheckActionActivated);
		}
	}
}
