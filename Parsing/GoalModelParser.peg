start = Start
value = KAOSTools.Parsing.ParsedElement
namespace = KAOSTools.Parsing
visibility = public
debug = 

Start := S Elements S;

Elements := 
    ( ( System / Predicate / Goal / AntiGoal / SoftGoal / DomProp / Obstacle / Agent / Import / DomHyp 
        / Entity / Type / Association ) S )*
    `value = BuildElements (results);`

Import := 
    'import' S '"' String '"' 
    `value = Import(results[2].Text);`
    
# First-class declarations
    
Predicate := 
    ( 'declare' / 'override' ) S 'predicate' S (PredicateAttribute S)* 'end' 
    `value = BuildPredicate(results);`

System := 
    ( 'declare' / 'override' ) S 'system' S (SystemAttribute S)* 'end' 
    `value = BuildSystem(results);`
    
Goal := 
    ( 'declare' / 'override' ) S 'goal' S (GoalAttribute S)* 'end'
    `value = BuildGoal(results);`
    
AntiGoal := 
    ( 'declare' / 'override' ) S 'antigoal' S (AntiGoalAttribute S)* 'end'
    `value = BuildAntiGoal(results);`
    
SoftGoal := 
    ( 'declare' / 'override' ) S 'softgoal' S (SoftGoalAttribute S)* 'end'
    `value = BuildSoftGoal(results);`
    
DomProp := 
    ( 'declare' / 'override' ) S ('domainproperty' / 'domprop' ) S (DomPropAttribute S)* 'end'
    `value = BuildDomainProperty(results);`
    
Obstacle := 
    ( 'declare' / 'override' ) S 'obstacle' S (ObstacleAttribute S)* 'end'
    `value = BuildObstacle(results);`

Agent := 
    ( 'declare' / 'override' ) S 'agent' S (AgentAttribute S)* 'end'
    `value = BuildAgent(results);`

DomHyp := 
    ( 'declare' / 'override' ) S ('domainhypothesis' / 'domhyp' ) S (DomHypAttribute S)* 'end'
    `value = BuildDomainHypothesis(results);`

GoalRefinement := 
    'declare' S (GoalRefinementAttribute S)* 'end'
    `value = BuildGoalRefinement(results);`

Entity := 
    ( 'declare' / 'override' ) S ( 'entity' / 'object' ) S (EntityAttribute S)* 'end'
    `value = BuildEntity(results);`

Type := 
    ( 'declare' / 'override' ) S 'type' S (TypeAttribute S)* 'end'
    `value = BuildType(results);`

Association := 
    ( 'declare' / 'override' ) S ( 'association' / 'relation' ) S (AssociationAttribute S)* 'end'
    `value = BuildAssociation(results);`
    
Attribute := 
    ( 'declare' / 'override' ) S ( 'attribute' ) S (AttributeAttribute S)* 'end'
    `value = BuildAttribute(results);`
    
# Attribute collection
                                                                                                                                                                                                         
GoalAttribute := 
    ( IdAttribute / NameAttribute / DefinitionAttribute / FormalSpecAttribute / RefinedByGoal 
      / ObstructedBy / AssignedTo / RDSAttribute / ExceptionAttribute / AssumptionAttribute )
    `value = results[0].Value;`            
                                                                                                                                                                  
AntiGoalAttribute := 
    ( IdAttribute / NameAttribute / DefinitionAttribute / FormalSpecAttribute / RefinedByAntiGoal 
      / AssignedTo )
    `value = results[0].Value;`
                                                                                                                                             
SoftGoalAttribute := 
    ( IdAttribute / NameAttribute / DefinitionAttribute )
    `value = results[0].Value;`
    
DomPropAttribute := 
    ( IdAttribute / NameAttribute / DefinitionAttribute / FormalSpecAttribute / Probability )
    `value = results[0].Value;`
    
DomHypAttribute := 
    ( IdAttribute / NameAttribute / DefinitionAttribute )
    `value = results[0].Value;`

ObstacleAttribute := 
    ( IdAttribute / NameAttribute / DefinitionAttribute / FormalSpecAttribute / RefinedByObstacle 
      / ResolvedBy / Probability / AssignedTo )
    `value = results[0].Value;`

AgentAttribute := 
    ( IdAttribute / NameAttribute / DefinitionAttribute / AgentTypeAttribute )
    `value = results[0].Value;`
                                                                         
PredicateAttribute := 
    ( IdAttribute / NameAttribute / DefinitionAttribute / Argument 
      / FormalSpecAttribute ) 
    `value = results[0].Value;`

SystemAttribute := 
    ( IdAttribute / NameAttribute / DefinitionAttribute / AlternativeAttribute ) 
    `value = results[0].Value;`

GoalRefinementAttribute := 
    ( IdAttribute / NameAttribute / DefinitionAttribute / GoalRefinementChildren 
    / PatternAttribute / SysRefAttribute / IsCompleteAttribute / SoftGoalContributionAttribute ) 
    `value = results[0].Value;`
    

EntityAttribute := 
    ( IdAttribute / NameAttribute / DefinitionAttribute / AttributeEntity / IsA / EntityTypeAttribute ) 
    `value = results[0].Value;`
    
TypeAttribute := 
    ( IdAttribute / NameAttribute / DefinitionAttribute ) 
    `value = results[0].Value;`
    
AssociationAttribute :=
    ( IdAttribute / NameAttribute / DefinitionAttribute / AttributeEntity / Link ) 
    `value = results[0].Value;`
    
AttributeAttribute :=
	( IdAttribute / NameAttribute / DefinitionAttribute / AttributeEntityTypeAttribute / DerivedAttribute )
    `value = results[0].Value;`
    
# Attributes

IdAttribute := 'id' S Identifier
    `value = BuildIdentifierAttribute(results);`

NameAttribute := 'name' S '"' String? '"'
    `value = BuildNameAttribute(results);`
    
FormalSpecAttribute := 'formalspec' S Formula
    `value = BuildFormalSpecAttribute(results);`
    
DefinitionAttribute := 'definition' S QuotedString
    `value = BuildDefinitionAttribute(results);`

RDSAttribute := 'rds' S Float 
    `value = BuildRDS(results);`

Probability := ('probability' / 'eps') S Float 
    `value = BuildProbability(results);`

ObstructedBy := 'obstructedby' S ( Obstacle / Name / Identifier ) 
    `value = BuildObstructedBy(results);`

AssumptionAttribute := 'assumption' S ( ( 'not' ( Obstacle / Name / Identifier ) ) / ( DomHyp / Goal / Name / Identifier ))
    `value = BuildAssumptionAttribute(results);`    
    
ExceptionAttribute := 'exception' S ( Obstacle / Name / Identifier ) (S 'then' S ( Goal / Name / Identifier ))?
    `value = BuildExceptionAttribute(results);`    
    
ResolvedBy := 'resolvedby' ( S '(' S ResolutionPattern S ')' )? S ( Goal / Name / Identifier )
    `value = BuildResolvedBy(results);`
        
AlternativeAttribute := 'alternative' S ( System / Name / Identifier ) 
    `value = BuildAlternativeAttribute(results);`

SysRefAttribute := 'sysref' S ( System / Name / Identifier ) 
    `value = BuildSysRefAttribute(results);`
    
PatternAttribute := 'pattern' S RefinementPattern
    `value = BuildPatternAttribute(results);`
    
    
IsA := 'is' S ( Entity / Name / Identifier )
    `value = BuildIsA(results);`
                                                                         

AgentTypeAttribute := 'type' S ( 'software' / 'environment' / 'malicious' )
    `value = BuildAgentTypeAttribute (results);`
    
EntityTypeAttribute := 'type' S ( 'software' / 'environment' / 'shared' )
    `value = BuildEntityTypeAttribute (results);`
    
    
RefinedByObstacle := 
    'refinedby' S 
    ( Obstacle / DomProp / DomHyp / Name / Identifier ) 
    (S ',' S ( Obstacle / DomProp / DomHyp / Name / Identifier ) )*
    `value = BuildRefinedBy(results);`
    
RefinedByGoal := 
    ( 'refinedby' S 
    	( GoalRefinement
    	  / ( (RefinedByPattern S)? (RefinedByAlternative S)?
    		( Goal / DomProp / DomHyp / Name / Identifier ) 
    		(S ',' S ( Goal / DomProp / DomHyp / Name / Identifier ) )* )
        )
    )
    `value = BuildRefinedBy(results);`
    
GoalRefinementChildren := 
    'children' S 
    ( Goal / DomProp / DomHyp / Name / Identifier ) 
    (S ',' S ( Goal / DomProp / DomHyp / Name / Identifier ) )*
    `value = BuildGoalRefinementChildren(results);`
    
RefinedByAntiGoal := 
    'refinedby' S (RefinedByAlternative S)?
    ( AntiGoal / Obstacle / DomProp / DomHyp / Name / Identifier ) 
    (S ',' S ( AntiGoal / Obstacle / DomProp / DomHyp / Name / Identifier ) )*
    `value = BuildRefinedByAntiGoal(results);`
    
RefinedByPattern := '(' S RefinementPattern S ')'
    `value = BuildRefinedByPattern(results);`
    
RefinedByAlternative := ('[' S ( Name / Identifier ) S ']')
    `value = BuildRefinedByAlternative(results);`
    
AssignedTo := 
    'assignedto' ('[' S ( Name / Identifier ) S ']')? S 
    ( Agent / Name / Identifier ) (S ',' S ( Agent / Name / Identifier ) )*
    `value = BuildAssignedTo(results);`

AttributeEntity := 'attribute' S ( Attribute / ( Name S (':' S ( Type / Name / Identifier ) )? ) )
    `value = BuildAttributeAttribute(results);`

Argument := 'argument' S Identifier S (':' S ( Entity / Name / Identifier ) )?
    `value = BuildArgument(results);`

Link := 'link' S Multiplicity? S ( Entity / Name / Identifier )
    `value = BuildLink(results);`


AttributeEntityTypeAttribute := 'type' S ( Type / Name / Identifier )
    `value = BuildAttributeEntityTypeAttribute(results);`

DerivedAttribute := 'derived'
    `value = BuildDerivedAttribute(results);`

IsCompleteAttribute := 'iscomplete' S ( 'yes' / 'no' / 'true' / 'false' )
    `value = BuildIsCompleteAttribute(results);`

SoftGoalContributionAttribute := 'contribute' S 
	( ( '+' / '-' ) S ( SoftGoal / Name / Identifier ) )
    (S ',' S ( ( '+' / '-' ) S ( SoftGoal / Name / Identifier ) ) )*
    `value = BuildSoftGoalContributionAttribute(results);`

# 

ResolutionPattern := 
	( 'substitution' / 'prevention' / 'obstacle_reduction' / 'restoration'
	  / 'weakening' / 'weak_mitigation' / 'strong_mitigation' )
	  ( S '[' S ( DomHyp / Goal / Name / Identifier ) ( S ',' S ( DomHyp / Goal / Name / Identifier ))* S ']' )?
    `value = BuildResolutionPattern(results);`
    
RefinementPattern := 
	( 'milestone' 
	/ ( 'case' S '[' S ( Float ) S ']' ) 
	/ 'introduce_guard' 
	/ 'divide_and_conquer' 
	/ 'unmonitorability' 
	/ 'uncontrollability' )
    `value = BuildRefinementPattern(results);`
    
# Expressions                                

Multiplicity :=
    '(' S MultiplicityLowerBound S ('..' S MultiplicityUpperBound S )? ')'
    `value = BuildMultiplicity(results);`

MultiplicityLowerBound := 
    ( [0-9] / 'M' / 'N' )
    `value = results[0].Value;`

MultiplicityUpperBound := 
    ( [0-9] / 'M' / 'N' / '*' )
    `value = results[0].Value;`

Identifier := [a-zA-Z] [a-zA-Z0-9_-]*
    `value = BuildIdentifier(results);`

Name := '"' String '"' 
    `value = BuildName(results);`
    
QuotedString := '@'? '"' String? '"'
    `value = BuildQuotedString(results);`

String := ( ( '""' / [^"] )+ )
    `value = BuildString(results)` `expected = "string"`
    
Float := ('.' [0-9]+) / ( [0-9]+ ('.' [0-9]+)? )
    `value = BuildFloat(results)` `expected = "float"`

# Formal specification

Formula := 
    'forall' S Variable S ':' S (Identifier / Name) ( ',' S Variable S ':' S (Identifier / Name) )* S '.' S Formula
    / 'exists' S Variable S ':' S (Identifier / Name) ( ',' S Variable S ':' S (Identifier / Name) )* S '.' S Formula
    / StrongBinary
    `value = BuildFormula(results);`
    `expected = "temporal formula"`

StrongBinary :=
    'when' S Binary S 'then' S Formula
    / Binary
    `value = BuildStrongBinary(results);`
    `expected = "temporal implication"`

Binary :=
    'if' S TemporalBinary S 'then' S Formula
    / TemporalBinary S 'iff' S Formula
    / TemporalBinary
    `value = BuildBinary(results);`
    `expected = "binary formula"`

TemporalBinary :=
    And S 'until' S Formula
    / And S 'release' S Formula
    / And S 'unless' S Formula
    / And
    `value = BuildTemporalBinary(results);`
    `expected = "temporal binary formula"`

And :=
    Or S 'and' S Formula
    / Or
    `value = BuildAnd(results);`
    `expected = "and"`

Or := 
    Unary S 'or' S Formula
    / Unary
    `value = BuildOr(results);`
    `expected = "or"`

Unary :=
    'not' S Formula
    / 'next' S Formula
    / ('sooner-or-later' / 'eventually') (S EventuallyTimeBoundEmphasis)? S Formula (S 'before' S Formula)?
    / ('always' / 'globally') (S GloballyTimeBoundEmphasis)? S Formula
    / Atom
    `value = BuildUnary(results);`
    `expected = "unary formula"`

Atom :=
    RelationReference
    / Comparison
    / AttributeReference
    / PredicateReference
    / '(' S Formula S ')'
    `value = BuildAtom(results);`
    `expected = "atomic formula"`

Comparison :=
	ComparisonMember S Comparator S ComparisonMember
    `value = BuildComparison(results);`
    `expected = "comparison"`

Comparator :=
	( '==' / '!=' / '>=' / '<=' / '>' / '<' ) 
    `value = null;`
    `expected = "comparator"`


ComparisonMember := 
	AttributeReference / PredicateReference / VariableReference / '"' String? '"' / Number / Bool
    `value = BuildComparisonMember(results);`
    `expected = "comparison member"`

AttributeReference :=
	Variable '.' (Identifier / Name)
    `value = BuildAttributeReference(results);`
    `expected = "attribute reference"`

RelationReference :=
	'(' S Variable ( S ',' S Variable )* S ')' S 'in' S (Identifier / Name)
    `value = BuildRelationReference(results);`
    `expected = "relation reference"`

PredicateReference :=  
	Identifier ( S '(' S (Variable ( S ',' S Variable )*)? S ')' )
	/ Name  S '(' S (Variable ( S ',' S Variable )*)? S ')'
    `value = BuildPredicateReference(results);`
    `expected = "predicate reference"`

VariableReference := Variable
    `value = BuildVariable(results)` `expected = "number"`

EventuallyTimeBoundEmphasis := 
	',' S EventuallyTimeBound S ','
    `value = results[1].Value;`
    `expected = "time bound emphasis"`

GloballyTimeBoundEmphasis := 
	',' S GloballyTimeBound S ','
    `value = results[1].Value;`
    `expected = "time bound emphasis"`

EventuallyTimeBound := 
	('strictly' S)? 'before' S TimeConstraint
	/ ('strictly' S)? 'after' S TimeConstraint
	/ 'in' S TimeConstraint
    `value = BuildEventuallyTimeBound(results);`
    `expected = "time bound"`

GloballyTimeBound :=
	'for' S ('strictly' S)? 'more' S 'than' S TimeConstraint
	/ 'for' S ('strictly' S)? 'less' S 'than' S TimeConstraint
	/ 'for' S TimeConstraint
    `value = BuildGloballyTimeBound(results);`
    `expected = "time bound"`
	
TimeConstraint :=
	(Integer S TimeUnit) (S Integer S TimeUnit)*
    `value = BuildTimeConstraint(results);`
    `expected = "time"`
	
TimeUnit :=
	( 'day' 's'? / 'd' )
	/ ( 'hour' 's'? / 'h' )
	/ ( 'minute' 's'? / 'min' )
	/ ( 'second' 's'? / 's' )
	/ ( 'milisecond' 's'? / 'ms' )
    `value = null` `expected = "time unit"`

Integer := [0-9]+
    `value = null` `expected = "integer"`

Number := ( '.' [0-9]+ / [0-9]+ ( '.' [0-9]+ )? )
    `value = null` `expected = "number"`

Variable := [a-z]+ [a-zA-Z0-9]*
    `value = null` `expected = "number"`

Bool := 'true' / 'false'
    `value = null` `expected = "bool"`

# Spaces and comments

S := (Space* Comment+ Space*)+ / Space* `text = null`
Space := [ \t\r\n] `;` `expected = "whitespace"`
Comment := '#' [^\r\n]* `text = null` `expected = "comment"`
