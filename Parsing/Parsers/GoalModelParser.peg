start = Start
value = KAOSTools.Parsing.Parsers.ParsedElement
namespace = KAOSTools.Parsing.Parsers
visibility = public
debug = 

Start := S Elements S;

Elements := 
    ( ( DeclareItem / ModelAttribute / Import ) S )*
    `value = BuildElements (results);`

ModelAttribute :=
    '@' ModelAttributeName S '"' String '"' 
    `value = ModelAttribute(results);`

Import := 
    'import' S '"' String '"' 
    `value = Import(results[2].Text);`
    
# Declare
    
DeclareItem := 
    ( 'declare' / 'override' ) S Identifier S '[' S Identifier S ']' S (Attribute S)* 'end' 
    `value = BuildDeclareItem(results);`

# Attribute collection
                                                                                                                                                                                                         
Attribute := 
    AttributeIdentifier S (AttributeParameters S)? AttributeValue
    `value = BuildAttribute(results);`

AttributeParameters :=
    '[' S AttributeValue S ']'
    `value = BuildAttributeParameters(results);`          

AttributeValue :=
    ( AttributeDecoratedValue ( S ',' S AttributeDecoratedValue ) * )
    `value = BuildAttributeValue(results);`

AttributeDecoratedValue := 
    ( AttributeAtomicValue S ':' S AttributeAtomicValue ) /
    ( AttributeAtomicValue S '[' S AttributeAtomicValue S ']' ) /
    AttributeAtomicValue
    `value = BuildAttributeDecoratedValue(results);`

AttributeAtomicValue := 
    Bool / QuotedString / Formula / Percentage / Integer / Float / Identifier
    `value = results[0].Value;`

# Expressions                                

AttributeIdentifier := !ReservedKeyword [a-zA-Z$] [a-zA-Z0-9_-]*
    `value = BuildIdentifier(results);`
    `expected = "Identifier"`

Identifier := !ReservedKeyword [a-zA-Z] [a-zA-Z0-9_-]*
    `value = BuildIdentifier(results);`
    `expected = "Identifier"`

ReservedKeyword := 'end'
    `value = null`

QuotedString := '@'? '"' String? '"'
    `value = BuildQuotedString(results);`
    `expected = "QuotedString"`

String := ( ( '""' / [^"] )+ )
    `value = BuildString(results)`
    `expected = "String"`
    
Float := ('.' [0-9]+) / ( [0-9]+ ('.' [0-9]+)? )
    `value = BuildFloat(results)` 
    `expected = "Float"`

Integer := [0-9]+
    `value = BuildInteger(results)` 
    `expected = "Integer"`

Percentage := ( Integer / Float ) '%'
    `value = BuildPercentage(results)` 
    `expected = "Percentage"`

Bool := 'true' / 'false'
    `value = BuildBool(results)`
    `expected = "Bool"`

ModelAttributeName := [a-zA-Z0-9\\._-]+
    `value = null`
    `expected = "ModelAttributeName"`

# Spaces and comments

S := 
    (Space* Comment+ Space*)+ / Space*
    `text = null`

Space := 
    [ \t\r\n]
    `text = null`
    `expected = "Whitespace"`

Comment := 
    '#' [^\r\n]* 
    `text = null`
    `expected = "Comment"`

# Formal specification

Variable := 
    [a-z]+ [a-zA-Z0-9]*
    `value = null`

Formula := 
    'forall' S Variable S ':' S (Identifier) ( ',' S Variable S ':' S (Identifier) )* S '.' S Formula
    / 'exists' S Variable S ':' S (Identifier) ( ',' S Variable S ':' S (Identifier) )* S '.' S Formula
    / StrongBinary
    `value = BuildFormula(results);`
    `expected = "temporal formula"`

StrongBinary :=
    'when' S Binary S 'then' S Formula
    / Binary
    `value = BuildStrongBinary(results);`
    `expected = "temporal implication"`

Binary :=
    'if' S TemporalBinary S 'then' S Formula
    / TemporalBinary S 'iff' S Formula
    / TemporalBinary
    `value = BuildBinary(results);`
    `expected = "binary formula"`

TemporalBinary :=
    And S 'until' (S EventuallyTimeBoundEmphasis)? S Formula
    / And S 'release' S Formula
    / And (S GloballyTimeBoundEmphasis)? S 'unless' S Formula
    / And
    `value = BuildTemporalBinary(results);`
    `expected = "temporal binary formula"`

And :=
    Or S 'and' S Formula
    / Or
    `value = BuildAnd(results);`
    `expected = "and"`

Or := 
    Unary S 'or' S Formula
    / Unary
    `value = BuildOr(results);`
    `expected = "or"`

Unary :=
    'not' S Unary
    / 'next' S Unary
    / ('sooner-or-later' / 'eventually') (S EventuallyTimeBoundEmphasis)? S Unary
    / ('always' / 'globally') (S GloballyTimeBoundEmphasis)? S Unary
    / Atom
    `value = BuildUnary(results);`
    `expected = "unary formula"`

Atom :=
    RelationReference
    / Comparison
    / AttributeReference
    / PredicateReference
    / '(' S Formula S ')'
    `value = BuildAtom(results);`
    `expected = "atomic formula"`

Comparison :=
	ComparisonMember S Comparator S ComparisonMember
    `value = BuildComparison(results);`
    `expected = "comparison"`

Comparator :=
	( '==' / '!=' / '>=' / '<=' / '>' / '<' ) 
    `value = null;`
    `expected = "comparator"`

ComparisonMember := 
	AttributeReference / PredicateReference / VariableReference / '"' String? '"' / Integer / Float / Bool
    `value = BuildComparisonMember(results);`
    `expected = "comparison member"`

AttributeReference :=
	Variable '.' (Identifier)
    `value = BuildAttributeReference(results);`
    `expected = "attribute reference"`

RelationReference :=
	'(' S Variable ( S ',' S Variable )* S ')' S 'in' S (Identifier)
    `value = BuildRelationReference(results);`
    `expected = "relation reference"`

PredicateReference :=  
	Identifier ( S '(' S (Variable ( S ',' S Variable )*)? S ')' )
    `value = BuildPredicateReference(results);`
    `expected = "predicate reference"`

VariableReference := Variable
    `value = BuildVariable(results)` `expected = "number"`

EventuallyTimeBoundEmphasis := 
	',' S EventuallyTimeBound S ','
    `value = results[1].Value;`
    `expected = "time bound emphasis"`

GloballyTimeBoundEmphasis := 
	',' S GloballyTimeBound S ','
    `value = results[1].Value;`
    `expected = "time bound emphasis"`

EventuallyTimeBound := 
	('strictly' S)? 'before' S TimeConstraint
	/ ('strictly' S)? 'after' S TimeConstraint
	/ 'in' S TimeConstraint
    `value = BuildEventuallyTimeBound(results);`
    `expected = "time bound"`

GloballyTimeBound :=
	'for' S ('strictly' S)? 'more' S 'than' S TimeConstraint
	/ 'for' S ('strictly' S)? 'less' S 'than' S TimeConstraint
	/ 'for' S TimeConstraint
    `value = BuildGloballyTimeBound(results);`
    `expected = "time bound"`
	
TimeConstraint :=
	(Integer S TimeUnit) (S Integer S TimeUnit)*
    `value = BuildTimeConstraint(results);`
    `expected = "time"`
	
TimeUnit :=
	( 'day' 's'? / 'd' )
	/ ( 'hour' 's'? / 'h' )
	/ ( 'minute' 's'? / 'min' )
	/ ( 'second' 's'? / 's' )
	/ ( 'milisecond' 's'? / 'ms' )
    `value = null` `expected = "time unit"`

LogicFormula := 
	LogicFormulaBinary
    `value = BuildLogicFormula(results);`
    `expected = "binary formula"`

LogicFormulaBinary :=
    'if' S LogicFormulaAnd S 'then' S LogicFormula
    / LogicFormulaAnd S 'iff' S LogicFormula
    / LogicFormulaAnd
    `value = BuildLogicFormulaBinary(results);`
    `expected = "binary formula"`

LogicFormulaAnd :=
    LogicFormulaOr S 'and' S LogicFormula
    / LogicFormulaOr
    `value = BuildLogicFormulaAnd(results);`
    `expected = "and"`

LogicFormulaOr := 
    LogicFormulaUnary S 'or' S LogicFormula
    / LogicFormulaUnary
    `value = BuildLogicFormulaOr(results);`
    `expected = "or"`

LogicFormulaUnary :=
    'not' S LogicFormulaUnary
    / LogicFormulaAtom
    `value = BuildLogicFormulaUnary(results);`
    `expected = "unary formula"`

LogicFormulaAtom :=
	'true' / 'false'
    / RelationReference
    / Comparison
    / AttributeReference
    / PredicateReference
    / '(' S LogicFormula S ')'
    `value = BuildLogicFormulaAtom(results);`
    `expected = "atomic formula"`
