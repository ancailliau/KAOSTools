// Machine generated by peg-sharp 0.3.427.0 from ./Parsers/GoalModelParser.peg.
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.Serialization;
using System.Security.Permissions;

namespace KAOSTools.Parsing.Parsers
{
	[Serializable]
	public sealed class ParserException : Exception
	{
		public ParserException()
		{
		}
		
		public ParserException(string message) : base(message)
		{
		}
		
		public ParserException(int line, int col, string file, string message) : base(string.Format("{0} at line {1} col {2}{3}", message, line, col, file != null ? (" in " + file) : "."))
		{
		}
		
		public ParserException(int line, int col, string file, string format, params object[] args) : this(line, col, file, string.Format(format, args))
		{
		}
		
		public ParserException(int line, int col, string file, string message, Exception inner) : base(string.Format("{0} at line {1} col {2}{3}", message, line, col, file != null ? (" in " + file) : "."), inner)
		{
		}
		
		[SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)]
		private ParserException(SerializationInfo info, StreamingContext context) : base(info, context)
		{
		}
	}
	
	// Thread safe if Parser instances are not shared across threads.
	public sealed partial class GoalModelParser
	{
		public GoalModelParser()
		{
			m_nonterminals.Add("Start", new ParseMethod[]{this.DoParseStartRule});
			m_nonterminals.Add("Elements", new ParseMethod[]{this.DoParseElementsRule});
			m_nonterminals.Add("ModelAttribute", new ParseMethod[]{this.DoParseModelAttributeRule});
			m_nonterminals.Add("Import", new ParseMethod[]{this.DoParseImportRule});
			m_nonterminals.Add("DeclareItem", new ParseMethod[]{this.DoParseDeclareItemRule});
			m_nonterminals.Add("Attribute", new ParseMethod[]{this.DoParseAttributeRule});
			m_nonterminals.Add("AttributeParameters", new ParseMethod[]{this.DoParseAttributeParametersRule});
			m_nonterminals.Add("AttributeValue", new ParseMethod[]{this.DoParseAttributeValueRule});
			m_nonterminals.Add("AttributeDecoratedValue", new ParseMethod[]{this.DoParseAttributeDecoratedValueRule});
			m_nonterminals.Add("AttributeAtomicValue", new ParseMethod[]{this.DoParseAttributeAtomicValueRule});
			m_nonterminals.Add("AttributeIdentifier", new ParseMethod[]{this.DoParseAttributeIdentifierRule});
			m_nonterminals.Add("Identifier", new ParseMethod[]{this.DoParseIdentifierRule});
			m_nonterminals.Add("ReservedKeyword", new ParseMethod[]{this.DoParseReservedKeywordRule});
			m_nonterminals.Add("QuotedString", new ParseMethod[]{this.DoParseQuotedStringRule});
			m_nonterminals.Add("String", new ParseMethod[]{this.DoParseStringRule});
			m_nonterminals.Add("Float", new ParseMethod[]{this.DoParseFloatRule});
			m_nonterminals.Add("Integer", new ParseMethod[]{this.DoParseIntegerRule});
			m_nonterminals.Add("Percentage", new ParseMethod[]{this.DoParsePercentageRule});
			m_nonterminals.Add("Bool", new ParseMethod[]{this.DoParseBoolRule});
			m_nonterminals.Add("ModelAttributeName", new ParseMethod[]{this.DoParseModelAttributeNameRule});
			m_nonterminals.Add("S", new ParseMethod[]{this.DoParseSRule});
			m_nonterminals.Add("Space", new ParseMethod[]{this.DoParseSpaceRule});
			m_nonterminals.Add("Comment", new ParseMethod[]{this.DoParseCommentRule});
			m_nonterminals.Add("Variable", new ParseMethod[]{this.DoParseVariableRule});
			m_nonterminals.Add("Formula", new ParseMethod[]{this.DoParseFormulaRule});
			m_nonterminals.Add("StrongBinary", new ParseMethod[]{this.DoParseStrongBinaryRule});
			m_nonterminals.Add("Binary", new ParseMethod[]{this.DoParseBinaryRule});
			m_nonterminals.Add("TemporalBinary", new ParseMethod[]{this.DoParseTemporalBinaryRule});
			m_nonterminals.Add("And", new ParseMethod[]{this.DoParseAndRule});
			m_nonterminals.Add("Or", new ParseMethod[]{this.DoParseOrRule});
			m_nonterminals.Add("Unary", new ParseMethod[]{this.DoParseUnaryRule});
			m_nonterminals.Add("Atom", new ParseMethod[]{this.DoParseAtomRule});
			m_nonterminals.Add("Comparison", new ParseMethod[]{this.DoParseComparisonRule});
			m_nonterminals.Add("Comparator", new ParseMethod[]{this.DoParseComparatorRule});
			m_nonterminals.Add("ComparisonMember", new ParseMethod[]{this.DoParseComparisonMemberRule});
			m_nonterminals.Add("AttributeReference", new ParseMethod[]{this.DoParseAttributeReferenceRule});
			m_nonterminals.Add("RelationReference", new ParseMethod[]{this.DoParseRelationReferenceRule});
			m_nonterminals.Add("PredicateReference", new ParseMethod[]{this.DoParsePredicateReferenceRule});
			m_nonterminals.Add("VariableReference", new ParseMethod[]{this.DoParseVariableReferenceRule});
			m_nonterminals.Add("EventuallyTimeBoundEmphasis", new ParseMethod[]{this.DoParseEventuallyTimeBoundEmphasisRule});
			m_nonterminals.Add("GloballyTimeBoundEmphasis", new ParseMethod[]{this.DoParseGloballyTimeBoundEmphasisRule});
			m_nonterminals.Add("EventuallyTimeBound", new ParseMethod[]{this.DoParseEventuallyTimeBoundRule});
			m_nonterminals.Add("GloballyTimeBound", new ParseMethod[]{this.DoParseGloballyTimeBoundRule});
			m_nonterminals.Add("TimeConstraint", new ParseMethod[]{this.DoParseTimeConstraintRule});
			m_nonterminals.Add("TimeUnit", new ParseMethod[]{this.DoParseTimeUnitRule});
			m_nonterminals.Add("LogicFormula", new ParseMethod[]{this.DoParseLogicFormulaRule});
			m_nonterminals.Add("LogicFormulaBinary", new ParseMethod[]{this.DoParseLogicFormulaBinaryRule});
			m_nonterminals.Add("LogicFormulaAnd", new ParseMethod[]{this.DoParseLogicFormulaAndRule});
			m_nonterminals.Add("LogicFormulaOr", new ParseMethod[]{this.DoParseLogicFormulaOrRule});
			m_nonterminals.Add("LogicFormulaUnary", new ParseMethod[]{this.DoParseLogicFormulaUnaryRule});
			m_nonterminals.Add("LogicFormulaAtom", new ParseMethod[]{this.DoParseLogicFormulaAtomRule});
			OnCtorEpilog();
		}
		
		public KAOSTools.Parsing.Parsers.ParsedElement Parse(string input)
		{
			return DoParseFile(input, null);
		}
		
		// File is used for error reporting.
		public KAOSTools.Parsing.Parsers.ParsedElement Parse(string input, string file)
		{
			return DoParseFile(input, file);
		}
		
		#region Non-Terminal Parse Methods
		// Start := S Elements S
		private State DoParseStartRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Elements");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			
			return _state;
		}
		
		// Elements := ((DeclareItem / ModelAttribute / Import) S)*
		private State DoParseElementsRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoRepetition(_state, results, 0, 2147483647,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoChoice(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "DeclareItem");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "ModelAttribute");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "Import");});},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");});});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildElements (results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			
			return _state;
		}
		
		// ModelAttribute := '@' ModelAttributeName S '"' String '"'
		private State DoParseModelAttributeRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "@");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "ModelAttributeName");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "\"");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "String");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "\"");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = ModelAttribute(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			
			return _state;
		}
		
		// Import := 'import' S '"' String '"'
		private State DoParseImportRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "import");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "\"");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "String");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "\"");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = Import(results[2].Text);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			
			return _state;
		}
		
		// DeclareItem := ('declare' / 'override') S Identifier S '[' S Identifier S ']' S (Attribute S)* 'end'
		private State DoParseDeclareItemRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoChoice(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "declare");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "override");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "[");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "]");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "Attribute");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");});});},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "end");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildDeclareItem(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			
			return _state;
		}
		
		// Attribute := AttributeIdentifier S (AttributeParameters S)? AttributeValue
		private State DoParseAttributeRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "AttributeIdentifier");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 1,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "AttributeParameters");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");});});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "AttributeValue");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildAttribute(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			
			return _state;
		}
		
		// AttributeParameters := '[' S AttributeValue S ']'
		private State DoParseAttributeParametersRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "[");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "AttributeValue");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "]");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildAttributeParameters(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			
			return _state;
		}
		
		// AttributeValue := AttributeDecoratedValue (S ',' S AttributeDecoratedValue)*
		private State DoParseAttributeValueRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "AttributeDecoratedValue");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");},
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, ",");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "AttributeDecoratedValue");});});});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildAttributeValue(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			
			return _state;
		}
		
		// AttributeDecoratedValue := (AttributeAtomicValue S ':' S AttributeAtomicValue) / (AttributeAtomicValue S '[' S AttributeAtomicValue S ']') / AttributeAtomicValue
		private State DoParseAttributeDecoratedValueRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "AttributeAtomicValue");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, ":");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "AttributeAtomicValue");});},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "AttributeAtomicValue");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "[");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "AttributeAtomicValue");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "]");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "AttributeAtomicValue");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildAttributeDecoratedValue(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			
			return _state;
		}
		
		// AttributeAtomicValue := Formula / Bool / QuotedString / Percentage / Float / Integer / Identifier
		private State DoParseAttributeAtomicValueRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "Formula");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Bool");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "QuotedString");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Percentage");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Float");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Integer");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = results[0].Value;
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			
			return _state;
		}
		
		// AttributeIdentifier := !ReservedKeyword [$a-zA-Z] [_-a-zA-Z0-9]*
		private State DoParseAttributeIdentifierRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoNAssert(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "ReservedKeyword");});},
			delegate (State s, List<Result> r) {return DoParseRange(s, r, false, "$", "azAZ", null, "[$a-zA-Z]");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoParseRange(s2, r2, false, "_-", "azAZ09", null, "[_-a-zA-Z0-9]");});});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildIdentifier(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "Identifier";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// Identifier := !ReservedKeyword [a-zA-Z] [_-a-zA-Z0-9]*
		private State DoParseIdentifierRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoNAssert(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "ReservedKeyword");});},
			delegate (State s, List<Result> r) {return DoParseRange(s, r, false, string.Empty, "azAZ", null, "[a-zA-Z]");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoParseRange(s2, r2, false, "_-", "azAZ09", null, "[_-a-zA-Z0-9]");});});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildIdentifier(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "Identifier";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// ReservedKeyword := 'end'
		private State DoParseReservedKeywordRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoParseLiteral(_state, results, "end");
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = null;
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			
			return _state;
		}
		
		// QuotedString := '@'? '"' String? '"'
		private State DoParseQuotedStringRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 1,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "@");});},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "\"");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 1,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "String");});},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "\"");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildQuotedString(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "QuotedString";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// String := ('""' / [^\"])+
		private State DoParseStringRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoRepetition(_state, results, 1, 2147483647,
			delegate (State s, List<Result> r) {return DoChoice(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "\"\"");},
				delegate (State s2, List<Result> r2) {return DoParseRange(s2, r2, true, "\"", string.Empty, null, "[^\"]");});});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildString(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "String";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// Float := ('.' [0-9]+) / ([0-9]+ ('.' [0-9]+)?)
		private State DoParseFloatRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, ".");},
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 1, 2147483647,
					delegate (State s3, List<Result> r3) {return DoParseRange(s3, r3, false, string.Empty, "09", null, "[0-9]");});});},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 1, 2147483647,
					delegate (State s3, List<Result> r3) {return DoParseRange(s3, r3, false, string.Empty, "09", null, "[0-9]");});},
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 0, 1,
					delegate (State s3, List<Result> r3) {return DoSequence(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, ".");},
						delegate (State s4, List<Result> r4) {return DoRepetition(s4, r4, 1, 2147483647,
							delegate (State s5, List<Result> r5) {return DoParseRange(s5, r5, false, string.Empty, "09", null, "[0-9]");});});});});});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildFloat(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "Float";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// Integer := [0-9]+
		private State DoParseIntegerRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoRepetition(_state, results, 1, 2147483647,
			delegate (State s, List<Result> r) {return DoParseRange(s, r, false, string.Empty, "09", null, "[0-9]");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildInteger(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "Integer";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// Percentage := (Integer / Float) '%'
		private State DoParsePercentageRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoChoice(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Integer");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Float");});},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "%");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildPercentage(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "Percentage";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// Bool := 'true' / 'false'
		private State DoParseBoolRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "true");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "false");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildBool(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "Bool";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// ModelAttributeName := [\\._-a-zA-Z0-9]+
		private State DoParseModelAttributeNameRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoRepetition(_state, results, 1, 2147483647,
			delegate (State s, List<Result> r) {return DoParseRange(s, r, false, "\\._-", "azAZ09", null, "[\\._-a-zA-Z0-9]");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = null;
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "ModelAttributeName";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// S := (Space* Comment+ Space*)+ / Space*
		private State DoParseSRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 1, 2147483647,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoRepetition(s3, r3, 0, 2147483647,
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Space");});},
					delegate (State s3, List<Result> r3) {return DoRepetition(s3, r3, 1, 2147483647,
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Comment");});},
					delegate (State s3, List<Result> r3) {return DoRepetition(s3, r3, 0, 2147483647,
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Space");});});});},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Space");});});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				string text = m_input.Substring(_start.Index, _state.Index - _start.Index);
				text = null;
				if (text != null)
					_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			
			return _state;
		}
		
		// Space := [ \t\r\n]
		private State DoParseSpaceRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoParseRange(_state, results, false, " \t\r\n", string.Empty, null, "[ \t\r\n]");
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				string text = m_input.Substring(_start.Index, _state.Index - _start.Index);
				text = null;
				if (text != null)
					_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "Whitespace";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// Comment := '#' [^\r\n]*
		private State DoParseCommentRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "#");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoParseRange(s2, r2, true, "\r\n", string.Empty, null, "[^\r\n]");});});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				string text = m_input.Substring(_start.Index, _state.Index - _start.Index);
				text = null;
				if (text != null)
					_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "Comment";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// Variable := [a-z]+ [a-zA-Z0-9]*
		private State DoParseVariableRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 1, 2147483647,
				delegate (State s2, List<Result> r2) {return DoParseRange(s2, r2, false, string.Empty, "az", null, "[a-z]");});},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoParseRange(s2, r2, false, string.Empty, "azAZ09", null, "[a-zA-Z0-9]");});});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = null;
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			
			return _state;
		}
		
		// Formula := ('forall' S Variable S ':' S Identifier (',' S Variable S ':' S Identifier)* S '.' S Formula) / ('exists' S Variable S ':' S Identifier (',' S Variable S ':' S Identifier)* S '.' S Formula) / StrongBinary
		private State DoParseFormulaRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "forall");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Variable");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, ":");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Identifier");},
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 0, 2147483647,
					delegate (State s3, List<Result> r3) {return DoSequence(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, ",");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "S");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Variable");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "S");},
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, ":");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "S");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Identifier");});});},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, ".");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Formula");});},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "exists");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Variable");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, ":");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Identifier");},
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 0, 2147483647,
					delegate (State s3, List<Result> r3) {return DoSequence(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, ",");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "S");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Variable");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "S");},
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, ":");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "S");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Identifier");});});},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, ".");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Formula");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "StrongBinary");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildFormula(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "temporal formula";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// StrongBinary := ('when' S Binary S 'then' S Formula) / Binary
		private State DoParseStrongBinaryRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "when");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Binary");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "then");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Formula");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Binary");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildStrongBinary(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "temporal implication";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// Binary := ('if' S TemporalBinary S 'then' S Formula) / (TemporalBinary S 'iff' S Formula) / TemporalBinary
		private State DoParseBinaryRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "if");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "TemporalBinary");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "then");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Formula");});},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "TemporalBinary");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "iff");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Formula");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "TemporalBinary");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildBinary(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "binary formula";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// TemporalBinary := (And S 'until' (S EventuallyTimeBoundEmphasis)? S Formula) / (And S 'release' S Formula) / (And (S GloballyTimeBoundEmphasis)? S 'unless' S Formula) / And
		private State DoParseTemporalBinaryRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "And");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "until");},
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 0, 1,
					delegate (State s3, List<Result> r3) {return DoSequence(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "S");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "EventuallyTimeBoundEmphasis");});});},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Formula");});},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "And");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "release");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Formula");});},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "And");},
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 0, 1,
					delegate (State s3, List<Result> r3) {return DoSequence(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "S");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "GloballyTimeBoundEmphasis");});});},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "unless");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Formula");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "And");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildTemporalBinary(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "temporal binary formula";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// And := (Or S 'and' S Formula) / Or
		private State DoParseAndRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Or");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "and");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Formula");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Or");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildAnd(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "and";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// Or := (Unary S 'or' S Formula) / Unary
		private State DoParseOrRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Unary");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "or");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Formula");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Unary");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildOr(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "or";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// Unary := ('not' S Unary) / ('next' S Unary) / (('sooner-or-later' / 'eventually') (S EventuallyTimeBoundEmphasis)? S Unary) / (('always' / 'globally') (S GloballyTimeBoundEmphasis)? S Unary) / Atom
		private State DoParseUnaryRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "not");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Unary");});},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "next");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Unary");});},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoChoice(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "sooner-or-later");},
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "eventually");});},
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 0, 1,
					delegate (State s3, List<Result> r3) {return DoSequence(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "S");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "EventuallyTimeBoundEmphasis");});});},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Unary");});},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoChoice(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "always");},
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "globally");});},
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 0, 1,
					delegate (State s3, List<Result> r3) {return DoSequence(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "S");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "GloballyTimeBoundEmphasis");});});},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Unary");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Atom");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildUnary(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "unary formula";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// Atom := RelationReference / Comparison / AttributeReference / PredicateReference / ('(' S Formula S ')')
		private State DoParseAtomRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "RelationReference");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Comparison");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "AttributeReference");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "PredicateReference");},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "(");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Formula");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, ")");});});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildAtom(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "atomic formula";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// Comparison := ComparisonMember S Comparator S ComparisonMember
		private State DoParseComparisonRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "ComparisonMember");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Comparator");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "ComparisonMember");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildComparison(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "comparison";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// Comparator := '==' / '!=' / '>=' / '<=' / '>' / '<'
		private State DoParseComparatorRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "==");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "!=");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ">=");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "<=");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ">");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "<");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = null;
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "comparator";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// ComparisonMember := AttributeReference / PredicateReference / VariableReference / ('"' String? '"') / Float / Integer / Bool
		private State DoParseComparisonMemberRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "AttributeReference");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "PredicateReference");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "VariableReference");},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "\"");},
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 0, 1,
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "String");});},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "\"");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Float");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Integer");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Bool");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildComparisonMember(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "comparison member";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// AttributeReference := Variable '.' Identifier
		private State DoParseAttributeReferenceRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "Variable");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ".");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildAttributeReference(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "attribute reference";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// RelationReference := '(' S Variable (S ',' S Variable)* S ')' S 'in' S Identifier
		private State DoParseRelationReferenceRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "(");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Variable");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");},
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, ",");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "Variable");});});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ")");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "in");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildRelationReference(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "relation reference";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// PredicateReference := Identifier (S '(' S (Variable (S ',' S Variable)*)? S ')')
		private State DoParsePredicateReferenceRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "(");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 0, 1,
					delegate (State s3, List<Result> r3) {return DoSequence(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Variable");},
						delegate (State s4, List<Result> r4) {return DoRepetition(s4, r4, 0, 2147483647,
							delegate (State s5, List<Result> r5) {return DoSequence(s5, r5,
								delegate (State s6, List<Result> r6) {return DoParse(s6, r6, "S");},
								delegate (State s6, List<Result> r6) {return DoParseLiteral(s6, r6, ",");},
								delegate (State s6, List<Result> r6) {return DoParse(s6, r6, "S");},
								delegate (State s6, List<Result> r6) {return DoParse(s6, r6, "Variable");});});});});},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, ")");});});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildPredicateReference(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "predicate reference";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// VariableReference := Variable
		private State DoParseVariableReferenceRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoParse(_state, results, "Variable");
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildVariable(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "number";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// EventuallyTimeBoundEmphasis := ',' S EventuallyTimeBound S ','
		private State DoParseEventuallyTimeBoundEmphasisRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ",");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "EventuallyTimeBound");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ",");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = results[1].Value;
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "time bound emphasis";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// GloballyTimeBoundEmphasis := ',' S GloballyTimeBound S ','
		private State DoParseGloballyTimeBoundEmphasisRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ",");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "GloballyTimeBound");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ",");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = results[1].Value;
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "time bound emphasis";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// EventuallyTimeBound := (('strictly' S)? 'before' S TimeConstraint) / (('strictly' S)? 'after' S TimeConstraint) / ('in' S TimeConstraint)
		private State DoParseEventuallyTimeBoundRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 0, 1,
					delegate (State s3, List<Result> r3) {return DoSequence(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "strictly");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "S");});});},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "before");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "TimeConstraint");});},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 0, 1,
					delegate (State s3, List<Result> r3) {return DoSequence(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "strictly");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "S");});});},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "after");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "TimeConstraint");});},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "in");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "TimeConstraint");});});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildEventuallyTimeBound(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "time bound";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// GloballyTimeBound := ('for' S ('strictly' S)? 'more' S 'than' S TimeConstraint) / ('for' S ('strictly' S)? 'less' S 'than' S TimeConstraint) / ('for' S TimeConstraint)
		private State DoParseGloballyTimeBoundRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "for");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 0, 1,
					delegate (State s3, List<Result> r3) {return DoSequence(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "strictly");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "S");});});},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "more");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "than");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "TimeConstraint");});},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "for");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 0, 1,
					delegate (State s3, List<Result> r3) {return DoSequence(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "strictly");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "S");});});},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "less");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "than");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "TimeConstraint");});},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "for");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "TimeConstraint");});});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildGloballyTimeBound(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "time bound";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// TimeConstraint := (Integer S TimeUnit) (S Integer S TimeUnit)*
		private State DoParseTimeConstraintRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Integer");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "TimeUnit");});},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "Integer");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "TimeUnit");});});});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildTimeConstraint(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "time";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// TimeUnit := (('day' 's'?) / 'd') / (('hour' 's'?) / 'h') / (('minute' 's'?) / 'min') / (('second' 's'?) / 's') / (('milisecond' 's'?) / 'ms')
		private State DoParseTimeUnitRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoChoice(s, r,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "day");},
					delegate (State s3, List<Result> r3) {return DoRepetition(s3, r3, 0, 1,
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "s");});});},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "d");});},
			delegate (State s, List<Result> r) {return DoChoice(s, r,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "hour");},
					delegate (State s3, List<Result> r3) {return DoRepetition(s3, r3, 0, 1,
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "s");});});},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "h");});},
			delegate (State s, List<Result> r) {return DoChoice(s, r,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "minute");},
					delegate (State s3, List<Result> r3) {return DoRepetition(s3, r3, 0, 1,
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "s");});});},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "min");});},
			delegate (State s, List<Result> r) {return DoChoice(s, r,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "second");},
					delegate (State s3, List<Result> r3) {return DoRepetition(s3, r3, 0, 1,
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "s");});});},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "s");});},
			delegate (State s, List<Result> r) {return DoChoice(s, r,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "milisecond");},
					delegate (State s3, List<Result> r3) {return DoRepetition(s3, r3, 0, 1,
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "s");});});},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "ms");});});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = null;
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "time unit";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// LogicFormula := LogicFormulaBinary
		private State DoParseLogicFormulaRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoParse(_state, results, "LogicFormulaBinary");
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildLogicFormula(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "binary formula";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// LogicFormulaBinary := ('if' S LogicFormulaAnd S 'then' S LogicFormula) / (LogicFormulaAnd S 'iff' S LogicFormula) / LogicFormulaAnd
		private State DoParseLogicFormulaBinaryRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "if");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "LogicFormulaAnd");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "then");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "LogicFormula");});},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "LogicFormulaAnd");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "iff");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "LogicFormula");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "LogicFormulaAnd");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildLogicFormulaBinary(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "binary formula";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// LogicFormulaAnd := (LogicFormulaOr S 'and' S LogicFormula) / LogicFormulaOr
		private State DoParseLogicFormulaAndRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "LogicFormulaOr");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "and");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "LogicFormula");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "LogicFormulaOr");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildLogicFormulaAnd(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "and";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// LogicFormulaOr := (LogicFormulaUnary S 'or' S LogicFormula) / LogicFormulaUnary
		private State DoParseLogicFormulaOrRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "LogicFormulaUnary");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "or");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "LogicFormula");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "LogicFormulaUnary");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildLogicFormulaOr(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "or";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// LogicFormulaUnary := ('not' S LogicFormulaUnary) / LogicFormulaAtom
		private State DoParseLogicFormulaUnaryRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "not");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "LogicFormulaUnary");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "LogicFormulaAtom");});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildLogicFormulaUnary(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "unary formula";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		
		// LogicFormulaAtom := 'true' / 'false' / RelationReference / Comparison / AttributeReference / PredicateReference / ('(' S LogicFormula S ')')
		private State DoParseLogicFormulaAtomRule(State _state, List<Result> _outResults)
		{
			State _start = _state;
			List<Result> results = new List<Result>();
			
			_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "true");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "false");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "RelationReference");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Comparison");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "AttributeReference");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "PredicateReference");},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "(");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "LogicFormula");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, ")");});});
			
			if (_state.Parsed)
			{
				KAOSTools.Parsing.Parsers.ParsedElement value = results.Count > 0 ? results[0].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				value = BuildLogicFormulaAtom(results);
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
			}
			else
			{
				string expected = null;
				expected = "atomic formula";
				if (expected != null)
					_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
			}
			
			return _state;
		}
		#endregion
		
		#region Private Helper Methods
		partial void OnCtorEpilog();
		partial void OnParseProlog();
		partial void OnParseEpilog(State state);
		
		private KAOSTools.Parsing.Parsers.ParsedElement DoParseFile(string input, string file)
		{
			m_file = file;
			m_input = m_file;				// we need to ensure that m_file is used or we will (in some cases) get a compiler warning
			m_input = input + "\x0";	// add a sentinel so we can avoid range checks
			m_cache.Clear();
			
			State state = new State(0, true);
			List<Result> results = new List<Result>();
			
			OnParseProlog();
			state = DoParse(state, results, "Start");
			
			int i = state.Index;
			if (!state.Parsed)
				DoThrow(state.Errors.Index, state.Errors.ToString());
			else if (i < input.Length)
				if (state.Errors.Expected.Length > 0)
					DoThrow(state.Errors.Index, state.Errors.ToString());
				else
					DoThrow(state.Errors.Index, "Not all input was consumed starting from '" + input.Substring(i, Math.Min(16, input.Length - i)) + "'");
			OnParseEpilog(state);
			
			return results[0].Value;
		}
		
		public string DoEscapeAll(string s)
		{
			System.Text.StringBuilder builder = new System.Text.StringBuilder(s.Length);
			
			foreach (char ch in s)
			{
				if (ch == '\n')
					builder.Append("\\n");
				
				else if (ch == '\r')
					builder.Append("\\r");
				
				else if (ch == '\t')
					builder.Append("\\t");
				
				else if (ch < ' ')
					builder.AppendFormat("\\x{0:X2}", (int) ch);
				
				else
					builder.Append(ch);
			}
			
			return builder.ToString();
		}
		
		// This is normally only used for error handling so it doesn't need to be too
		// fast. If it somehow does become a bottleneck for some parsers they can
		// replace it with the custom-methods setting.
		private int DoGetLine(int index)
		{
			int line = 1;
			
			int i = 0;
			while (i <= index)
			{
				char ch = m_input[i++];
				
				if (ch == '\r' && m_input[i] == '\n')
				{
					++i;
					++line;
				}
				else if (ch == '\r')
				{
					++line;
				}
				else if (ch == '\n')
				{
					++line;
				}
			}
			
			return line;
		}
		
		private int DoGetCol(int index)
		{
			int start = index;
			
			while (index > 0 && m_input[index - 1] != '\n' && m_input[index - 1] != '\r')
			{
				--index;
			}
			
			return start - index + 1;
		}
		
		private void DoThrow(int index, string format, params object[] args)
		{
			int line = DoGetLine(index);
			int col = DoGetCol(index);
		
			// We need this retarded if or string.Format will throw an error if it
			// gets a format string like "Expected { or something".
			if (args != null && args.Length > 0)
				throw new ParserException(line, col, m_file, DoEscapeAll(string.Format(format, args)));
			else
				throw new ParserException(line, col, m_file, DoEscapeAll(format));
		}
		
		private State DoParseLiteral(State state, List<Result> results, string literal)
		{
			int j = state.Index;
			
			for (int i = 0; i < literal.Length; ++i)
			{
				if (m_input[j + i] != literal[i])
				{
					return new State(state.Index, false, ErrorSet.Combine(state.Errors, new ErrorSet(state.Index, literal)));
				}
			}
			
			int k = j + literal.Length;
			
			results.Add(new Result(this, j, literal.Length, m_input, default(KAOSTools.Parsing.Parsers.ParsedElement)));
			state = new State(k, true, state.Errors);
			
			return state;
		}
		
		private State DoParse(State state, List<Result> results, string nonterminal)
		{
			State start = state;
			
			CacheValue cache;
			CacheKey key = new CacheKey(nonterminal, start.Index);
			if (!m_cache.TryGetValue(key, out cache))
			{
				ParseMethod[] methods = m_nonterminals[nonterminal];
				
				int oldCount = results.Count;
				state = DoChoice(state, results, methods);
				
				bool hasResult = state.Parsed && results.Count > oldCount;
				KAOSTools.Parsing.Parsers.ParsedElement value = hasResult ? results[results.Count - 1].Value : default(KAOSTools.Parsing.Parsers.ParsedElement);
				cache = new CacheValue(state, value, hasResult);
				m_cache.Add(key, cache);
			}
			else
			{
				if (cache.HasResult)
					results.Add(new Result(this, start.Index, cache.State.Index - start.Index, m_input, cache.Value));
			}
			
			return cache.State;
		}
		
		private State DoChoice(State state, List<Result> results, params ParseMethod[] methods)
		{
			State start = state;
			int startResult = results.Count;
			
			foreach (ParseMethod method in methods)
			{
				State temp = method(state, results);
				if (temp.Parsed)
				{
					state = temp;
					break;
				}
				else
				{
					state = new State(start.Index, false, ErrorSet.Combine(state.Errors, temp.Errors));
					results.RemoveRange(startResult, results.Count - startResult);
				}
			}
			
			return state;
		}
		
		private State DoSequence(State state, List<Result> results, params ParseMethod[] methods)
		{
			State start = state;
			int startResult = results.Count;
			
			foreach (ParseMethod method in methods)
			{
				State temp = method(state, results);
				if (temp.Parsed)
				{
					state = temp;
				}
				else
				{
					state = new State(start.Index, false, ErrorSet.Combine(start.Errors, temp.Errors));
					results.RemoveRange(startResult, results.Count - startResult);
					break;
				}
			}
			
			return state;
		}
		
		private State DoRepetition(State state, List<Result> results, int min, int max, ParseMethod method)
		{
			State start = state;
			
			int count = 0;
			while (count <= max)
			{
				State temp = method(state, results);
				if (temp.Parsed && temp.Index > state.Index)
				{
					state = temp;
					++count;
				}
				else
				{
					state = new State(state.Index, true, ErrorSet.Combine(state.Errors, temp.Errors));
					break;
				}
			}
			
			if (count < min || count > max)
				state = new State(start.Index, false, ErrorSet.Combine(start.Errors, state.Errors));
			
			return state;
		}
		
		private State DoParseRange(State state, List<Result> results, bool inverted, string chars, string ranges, UnicodeCategory[] categories, string label)
		{
			char ch = m_input[state.Index];
			
			bool matched = chars.IndexOf(ch) >= 0;
			for (int i = 0; i < ranges.Length && !matched; i += 2)
			{
				matched = ranges[i] <= ch && ch <= ranges[i + 1];
			}
			for (int i = 0; categories != null && i < categories.Length && !matched; ++i)
			{
				matched = char.GetUnicodeCategory(ch) == categories[i];
			}
			
			if (inverted)
				matched = !matched && ch != '\x0';
			
			if (matched)
			{
				results.Add(new Result(this, state.Index, 1, m_input, default(KAOSTools.Parsing.Parsers.ParsedElement)));
				return new State(state.Index + 1, true, state.Errors);
			}
			
			return new State(state.Index, false, ErrorSet.Combine(state.Errors, new ErrorSet(state.Index, label)));
		}
		
		private State DoNAssert(State state, List<Result> results, ParseMethod method)
		{
			State temp = method(state, results);
			
			state = new State(state.Index, !temp.Parsed, state.Errors);
			
			return state;
		}
		#endregion
		
		#region Private Types
		private struct CacheKey : IEquatable<CacheKey>
		{
			public CacheKey(string rule, int index)
			{
				m_rule = rule;
				m_index = index;
			}
			
			public override bool Equals(object obj)
			{
				if (obj == null)
					return false;
				
				if (GetType() != obj.GetType())
					return false;
				
				CacheKey rhs = (CacheKey) obj;
				return this == rhs;
			}
			
			public bool Equals(CacheKey rhs)
			{
				return this == rhs;
			}
			
			public static bool operator==(CacheKey lhs, CacheKey rhs)
			{
				if (lhs.m_rule != rhs.m_rule)
					return false;
				
				if (lhs.m_index != rhs.m_index)
					return false;
				
				return true;
			}
			
			public static bool operator!=(CacheKey lhs, CacheKey rhs)
			{
				return !(lhs == rhs);
			}
			
			public override int GetHashCode()
			{
				int hash = 0;
				
				unchecked
				{
					hash += m_rule.GetHashCode();
					hash += m_index.GetHashCode();
				}
				
				return hash;
			}
			
			private string m_rule;
			private int m_index;
		}
		
		private struct CacheValue
		{
			public CacheValue(State state, KAOSTools.Parsing.Parsers.ParsedElement value, bool hasResult)
			{
				State = state;
				Value = value;
				HasResult = hasResult;
			}
			
			public State State;
			
			public KAOSTools.Parsing.Parsers.ParsedElement Value;
			
			public bool HasResult;
		}
		
		private delegate State ParseMethod(State state, List<Result> results);
		
		// These are either an error that caused parsing to fail or the reason a
		// successful parse stopped.
		private struct ErrorSet
		{
			public ErrorSet(int index, string expected)
			{
				Index = index;
				Expected = new string[]{expected};
			}
			
			public ErrorSet(int index, string[] expected)
			{
				Index = index;
				Expected = expected;
			}
			
			// The location associated with the errors. For a failed parse this will be the
			// same as State.Index. For a successful parse it will be State.Index or later.
			public int Index;
			
			// This will be the name of something which was expected, but not found.
			public string[] Expected;
			
			public static ErrorSet Combine(ErrorSet lhs, ErrorSet rhs)
			{
				if (lhs.Index > rhs.Index)
				{
					return lhs;
				}
				else if (lhs.Index < rhs.Index)
				{
					return rhs;
				}
				else
				{
					List<string> errors = new List<string>(lhs.Expected.Length + rhs.Expected.Length);
					errors.AddRange(lhs.Expected);
					foreach (string err in rhs.Expected)
					{
						if (errors.IndexOf(err) < 0)
							errors.Add(err);
					}
					return new ErrorSet(lhs.Index, errors.ToArray());
				}
			}
			
			public override string ToString()
			{
				if (Expected.Length > 0)
					return string.Format("Expected {0}", string.Join(" or ", Expected));
				else
					return "<none>";
			}
		}
		
		// The state of the parser.
		private struct State
		{
			public State(int index, bool parsed)
			{
				Index = index;
				Parsed = parsed;
				Errors = new ErrorSet(index, new string[0]);
			}
			
			public State(int index, bool parsed, ErrorSet errors)
			{
				Index = index;
				Parsed = parsed;
				Errors = errors;
			}
			
			// Index of the first unconsumed character.
			public int Index;
			
			// True if the expression associated with the state successfully parsed.
			public bool Parsed;
			
			// If Parsed is false then this will explain why. If Parsed is true it will
			// say why the parse stopped.
			public ErrorSet Errors;
		}
		
		// The result of parsing a literal or non-terminal.
		private struct Result
		{
			public Result(GoalModelParser parser, int index, int length, string input, KAOSTools.Parsing.Parsers.ParsedElement value)
			{
				m_parser = parser;
				m_index = index;
				m_length = length;
				m_input = input;
				Value = value;
			}
			
			// The text which was parsed by the terminal or non-terminal.
			public string Text {get {return m_input.Substring(m_index, m_length);}}
			
			// The 1-based line number the (non)terminal started on.
			public int Line {get {return m_parser.DoGetLine(m_index);}}
			
			// The 1-based column number the (non)terminal started on.
			public int Col {get {return m_parser.DoGetCol(m_index);}}
			
			// For non-terminals this will be the result of the semantic action, 
			// otherwise it will be the default value.
			public KAOSTools.Parsing.Parsers.ParsedElement Value;
			
			private GoalModelParser m_parser;
			private int m_index;
			private int m_length;
			private string m_input;
		}
		
		#endregion
		
		#region Fields
		private string m_input;
		private string m_file;
		private Dictionary<string, ParseMethod[]> m_nonterminals = new Dictionary<string, ParseMethod[]>();
		private Dictionary<CacheKey, CacheValue> m_cache = new Dictionary<CacheKey, CacheValue>();
		#endregion
	}
}
